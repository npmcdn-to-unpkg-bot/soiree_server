#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local sha1> <remote ref> <remote sha1>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

while read refname newrev
do
# Only run this script for the master branch. You can remove this 
# if block if you wish to run it for others as well.


    # Anything echo'd will show up in the console for the person 
    # who's doing a push
    echo "Running test suite for $newrev ... "

    # This part is the actual code which is used to run our tests
    # In my case, the phpunit testsuite resides in the tests directory, so go there   

    # And execute the testsuite, while ignoring any output
    npm test

    # $? is a shell variable which stores the return code from what we just ran
    rc=$?
    if [[ $rc != 0 ]] ; then
	    if [[ $refname = "refs/heads/master" ]] ; then
	        # A non-zero return code means an error occurred, so tell the user and exit
	        echo "npm test failed on rev $newrev on master branch - push denied. Run tests locally and confirm they pass before pushing"
	        exit $rc
	    else 
    		echo "just so you know, your current build fails testing, but since this branch is not master, push is allowed. "
	    fi
    fi
done
 
# Everything went OK so we can exit with a zero
exit 0

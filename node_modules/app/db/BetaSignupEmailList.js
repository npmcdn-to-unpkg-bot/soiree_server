var mongoose = require('./mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;


/* Other Models */
var Business = require('./Business.js');
var User = require('./User.js');
var Soiree = require('./Soiree.js');
/* Packages */
var shortid = require('shortid');
var _ = require("underscore");

/* Helper */
var helpersFolderLocation = "app/helpers/";
var DateHelper = require(helpersFolderLocation + 'DateHelper.js');
var ResHelper = require(helpersFolderLocation + 'ResHelper.js');
var CreditCardHelper = require(helpersFolderLocation + 'CreditCardHelper.js');
var LocationHelper = require(helpersFolderLocation + 'LocationHelper.js');
var PushNotificationHelper = require(helpersFolderLocation + 'PushNotificationHelper.js');
var EmailHelper = require('app/helpers/EmailHelper.js');

var ErrorCodes = require(helpersFolderLocation + 'ErrorCodes.js');


var customSchema = new Schema({
        emails: [{email: String, gender: String, os: String}]
    },
    {timestamps: {createdAt: 'dateCreated', updatedAt: 'dateUpdated'}}
);

customSchema.statics.findList = function(successCallback, errorCallback){
    this.findOne({}, function(err, list){
        if (err || !list){
            return errorCallback(ErrorCodes.MongoError);
        }
        else{
            successCallback(list);
        }
    });
};

customSchema.statics.addEmail = function(email, gender, os, successCallback, errorCallback){

    email = email.toLowerCase().trim();
    var emailObj = {email: email, gender: gender, os: os};

    this.findOneAndUpdate({}, {"$addToSet" : {"emails" : emailObj} }, {new : true}, function(err, list){
       if (err){
           errorCallback(ErrorCodes.Error);
       }
        else{
            var index = -1;
            for (var i = 0; i < list.emails.length; i++){
                var currEmail = list.emails[i].email;
                if (currEmail && currEmail === email){
                    index = i;
                    break;
                }
            }
           //if (index === -1){
               EmailHelper.sendBetaSignupEmail(email, gender, os);
           //}
           
           successCallback();
       }
    });

};

//customSchema.methods.addEmail = function(email, gender, os, successCallback, errorCallback){
//
//    this.emails.push(emailObj);
//
//    this.save(function(err, list){
//        if (err){
//            errorCallback("MongoError");
//        }
//        else{
//            console.log("Signed up email: " + email);
//            if (index === -1){
//                EmailHelper.sendBetaSignupEmail(email, gender, os);
//            }
//            successCallback();
//        }
//    });
//};

//customSchema.statics.addEmail = function(email, gender, os, successCallback, errorCallback){
//    this.findList(function(list){
//        list.addEmail(email, gender, os, successCallback, errorCallback);
//    }, errorCallback);
//};
//
//customSchema.methods.addEmail = function(email, gender, os, successCallback, errorCallback){
//    email = email.toLowerCase();
//    var emailObj = {email: email, gender: gender, os: os};
//
//    var index = -1;
//
//    for (var i = 0; i < this.emails.length; i++){
//        var currEmail = this.emails[i].email;
//        if (currEmail && currEmail === email){
//            index = i;
//            console.log('email exists');
//            break;
//            //return errorCallback("EmailExists");
//        }
//    }
//
//    if (index != -1){
//        this.emails.splice(index,1);
//        //this.emails[index] = emailObj;
//    }
//    this.emails.push(emailObj);
//
//    this.save(function(err, list){
//        if (err){
//            errorCallback("MongoError");
//        }
//        else{
//            console.log("Signed up email: " + email);
//            if (index === -1){
//                EmailHelper.sendBetaSignupEmail(email, gender, os);
//            }
//            successCallback();
//        }
//    });
//};

customSchema.virtual('').get(function () {
});


customSchema.pre("save", function (next) {
    next();
});

customSchema.post("init", function (soiree) {

});

var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
customSchema.plugin(deepPopulate, options);

module.exports = mongoose.model('CustomSchema', customSchema);
var mongoose = require('./mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;


/* Other Models */
//var Business = require('./../Business.js');
//var User = require('./../User.js');
//var Soiree = require('./Soiree.js');

/* Packages */
var shortid = require('shortid');
var _ = require("underscore");

/* Helper */
var helpersFolderLocation = "../../helpers/";
var DateHelper = require('app/helpers/DateHelper.js');
var ResHelper = require('app/helpers/ResHelper.js');
var ArrayHelper = require('app/helpers/ArrayHelper.js');
var CreditCardHelper = require('app/helpers/CreditCardHelper.js');
var LocationHelper = require('app/helpers/LocationHelper.js');
var PushNotificationHelper = require('app/helpers/PushNotificationHelper.js');
var Globals = require('app/helpers/Globals.js');
var io = Globals.io;
var autopopulate = require('mongoose-autopopulate');

var ErrorCodes = require('app/helpers/ErrorCodes.js');

var customSchema = new Schema({
        _soiree : {type: ObjectId, ref: "Soiree", autopopulate : true},
        roomId : {type: String, required: true},
        _usersJoined : [{type: ObjectId, ref: "User", autopopulate: {select : "firstName lastName profilePictureUrl"}}],
        started : {type: Boolean, default: false},
        questionsAsked : [{type: String}],
    },
    {timestamps: {createdAt: 'dateCreated', updatedAt: 'dateUpdated'}}
);

var Questions = {
    "funny" : [
        "Which superpower would you choose: be invisible forever or have shovels as hands?",
        "Would you rather sweat mayonnaise or have cheese as your saliva?"
    ],
    "personal" : [

    ]
};
var StartMessages = [
  "This is the start message", "Welcome to Soiree! "
];

customSchema.methods.joinUser = function(user, socket){
    if (user && socket) {
        console.log('a user connected to soireeInProgress. Joining room ' + this.roomId);

        var host = this;

        socket.join(host.roomId, function (err) {
            if (err) {
                console.log("Error joining room " + host.roomId + " : " + err);
                socket.emit('error joining room', {roomId: host.roomId});
            }
            else {
                console.log("user joined room. sending welcome messages...");
                //send proper welcome messages
                host.sendWelcomeMessagesToRoom(socket, user);
                host.sendWelcomeMessagesToUser(socket);

                //add user to users joined. only after creating names string
                ArrayHelper.pushOnlyOncePopulated(host, "_usersJoined", user._id);
                console.log("host._usersJoined: " + host._usersJoined);
                host.save(Globals.saveErrorCallback);
                if (!host._soiree.started) {
                    host._soiree.startIfPossible();
                }
            }
        });

    }
    else{
        console.log("in joinUser but passed empty user or socket");
    }
    //var message = {author: "Debug", text: "Connected to " + SOIREE_LOWERCASE};
    //socket.emit('message', message);
};


//customSchema.methods.startIfNecessary = function(timeLimitUp){
//    //start if numUsersMin are here
//    if (this._usersJoined.length >= this.numUsersMin){
//        this.start();
//    }
//    else{
//        if (timeLimitUp){
//            //if 10 minutes have passed andnumUsersMin arent here and there are at least 2 people
//            if (this._usersJoined.length >= 2){
//                this.start();
//            }
//            else{
//                //else, don't start, apologize to only user there
//            }
//        }
//    //else keep waiting for new users to join or time limit to be up
//    }
//};

customSchema.methods.start = function(){
    console.log("starting host for soiree: " + this._soiree.soireeId);
    if (!this.started){
        this.started = true;
        this.save(Globals.saveErrorCallback);
        this.sendMessagesToRoom(createMessages(StartMessages));
    }
};

customSchema.methods.disconnectUser = function(user){
    var index = this._usersJoined.indexOf(user._id);
    if (index != -1){
        this._usersJoined.splice(index, 1);
    }
};


customSchema.methods.sendWelcomeMessagesToRoom = function(socket, userJoined) {
    var message = userJoined.firstName + " joined the party.";
    console.log('sending message ' + message);
    socket.broadcast.to(this.roomId).emit('message', createMessage(message));
};

customSchema.methods.sendWelcomeMessagesToUser = function(socket) {
    var namesString;
    if (this._usersJoined.length > 0) {
        var names = [];
        for (var i = 0; i < this._usersJoined.length; i++) {
            var currUser = this._usersJoined[i];
            names.push(currUser.fullName);
        }
        namesString = names.join(", ");
    }

    var soireeStatusString;
    if (namesString) {
        soireeStatusString = "You've joined the soiree, along with " + namesString + ". The " + Globals.SOIREE_LOWERCASE + " will start soon. In the meantime, introduce yourself - why not?";
    }
    else {
        soireeStatusString = "It looks like you're the first person here. Grab a seat, have a drink, and chillax. The " + Globals.SOIREE_LOWERCASE + " will start soon.";
    }

    var welcomeMessages = createMessages(['Welcome!', soireeStatusString, "Hope you have fun!"]);
    console.log('sending messages: ' + welcomeMessages);
    socket.emit('messages', welcomeMessages);
};

customSchema.methods.sendMessagesToRoom = function(messages) {
    if (messages){
        io.to(this.roomId).emit("messages", messages);
    }
};

customSchema.methods.askQuestion = function(socket){
    var question = "What is your name?";
    socket.emit('question', question);
};

customSchema.virtual('').get(function () {
});


customSchema.pre("save", function (next) {
    next();
});

customSchema.post("init", function (soiree) {

});

function createMessages(textArray){
    var arr = [];
    for (var i = 0; i < textArray.length; i++){
        arr.push(createMessage(textArray[i]));
    }
    return arr;
};

function createMessage(text){
    return {author: "Host", text: text};
};


var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
customSchema.plugin(deepPopulate, options);
customSchema.plugin(autopopulate);

module.exports = mongoose.model('SoireeHost', customSchema);
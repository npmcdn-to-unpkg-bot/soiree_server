var mongoose = require('app/db/mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;


/* Packages */
var shortid = require('shortid');
var _ = require("underscore");

/* Helper */
var helpersFolderLocation = "app/helpers/";
var ArrayHelper = require(helpersFolderLocation + 'ArrayHelper.js');

var DateHelper = require(helpersFolderLocation + 'DateHelper.js');
var ResHelper = require(helpersFolderLocation + 'ResHelper.js');
var CreditCardHelper = require(helpersFolderLocation + 'CreditCardHelper.js');
var LocationHelper = require(helpersFolderLocation + 'LocationHelper.js');
var PushNotificationHelper = require(helpersFolderLocation + 'PushNotificationHelper.js');
var Globals = require('app/helpers/Globals.js');
var ErrorCodes = require(helpersFolderLocation + 'ErrorCodes.js');

var RefreshLineDataEvery = 7 * 24 * 60 * 60 * 1000; //7 days
var MaxDistance = .5; //in miles

var customSchema = new Schema({
        lineName : {type: String, required: true},
        locations : [{latitude: {type: String}, longitude : {type: String}}],
        date : {type: Date, default: new Date()}
    }
);

//customSchema.virtual('').get(function () {
//});

//customSchema.pre("save", function (next) {
//    next();
//});
//
//customSchema.post("init", function (doc) {
//
//});

function distance(lat1, lon1, lat2, lon2, unit) {
    var radlat1 = Math.PI * lat1/180
    var radlat2 = Math.PI * lat2/180
    var theta = lon1-lon2
    var radtheta = Math.PI * theta/180
    var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
    dist = Math.acos(dist)
    dist = dist * 180/Math.PI
    dist = dist * 60 * 1.1515
    if (unit=="K") { dist = dist * 1.609344 }
    if (unit=="N") { dist = dist * 0.8684 }
    return dist
}

customSchema.statics.findLinesNearLocation = function(location, successCallback, errorCallback){
    if (!location) return errorCallback;
    var SubwayLine = this;


    var processLines = function(subwayLines){
        var ans = [];

        subwayLines.forEach(function(line){
           for (var i = 0; i < line.locations.length; i++){
               var coordinate = line.locations[i];

               var lat1 = parseFloat(location.latitude), lon1 = parseFloat(location.longitude);
               var lat2 = parseFloat(coordinate.latitude), lon2 = parseFloat(coordinate.longitude);

               console.log(lat1, lat2, lon1, lon2);
               var dist = distance(lat1, lon1, lat2, lon2);

               console.log('checking line ' + line.lineName + ' with distance ' + dist);

               if (dist <= MaxDistance) {
                   ans.push(line.lineName);
                   break;
               }
           }
        });

        console.log('subway lines near: ' + ans);
        successCallback(ans);
    };

    SubwayLine.find({}).exec(function(err, _subwayLines){
       if (err){
           console.log(err);
           return errorCallback();
       }
        else if (!_subwayLines || _subwayLines.length === 0){
           return SubwayLine.fillInData(processLines, errorCallback);
       }
        else{
           processLines(_subwayLines);
       }

        if (_subwayLines.length > 0 && Date.now() - _subwayLines[0].date.getTime() > RefreshLineDataEvery){
            SubwayLine.fillInData();
        }
    });
};

customSchema.statics.fillInData = function(successCallback, errorCallback){
    var url = "http://web.mta.info/developers/data/nyct/subway/StationEntrances.csv";
    var SubwayLine = this;

    Globals.requestWebpage(url, function(data){
        //console.log(data);

        var lines = {}, stationNames = {};

        var stationsArr = data.split('\n');

        for (var i = 1; i < stationsArr.length; i++){//skip 1st line with column titles
            var str = stationsArr[i];
            var station = str.split(',');

            //if (station.length >= 5){
            //    var stationName = station[1] + station[2];
            //    if (!stationNames[stationName]){
            //        stationNames[stationName] = 1;

                    var latitude = station[station.length-2];
                    var longitude = station[station.length-1];

                    for (var j = 5; j < station.length && station[j] && j <= 15; j++){
                        var line = station[j].trim();

                        if (['GS', 'FS', 'H', 'S'].indexOf(line) === -1){//ignore GS, FS, H, and S trains
                            if (!lines[line]) { lines[line] = []; }
                            lines[line].push({latitude : latitude, longitude : longitude});
                        }
                    }
                //}
            //}
        }
        //console.log(lines);

        SubwayLine.find({}).exec(function(err, subwayLines){
            if (err){
                console.log(err);
                if (errorCallback)
                    errorCallback();
            }
            else if (!subwayLines || subwayLines.length === 0){
                subwayLines = [];
                Globals.loopThroughObject(lines, function(key){
                    var subwayLine = new SubwayLine({
                        lineName : key,
                        locations : lines[line]
                    });
                    subwayLine.save(Globals.saveErrorCallback);
                    if (successCallback)
                        subwayLines.push(subwayLine);
                });
                if (successCallback)
                    successCallback(subwayLines);
            }
            else{
                subwayLines.forEach(function(subwayLine){
                    var currLineLocations = lines[subwayLine.lineName];
                    if (currLineLocations){
                        subwayLine.locations = currLineLocations;
                        subwayLine.date = new Date();
                        subwayLine.save(Globals.saveErrorCallback);
                    }
                });
                if (successCallback)
                    successCallback(subwayLines);
            }

        });

    }, function(){
        console.log("error in SubwayLine.fillInData");
        if (errorCallback)
            errorCallback();
    });
};

module.exports = mongoose.model('SubwayLine', customSchema);
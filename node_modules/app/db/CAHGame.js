var mongoose = require('app/db/mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;


/* Other Models */
//var Business = require('./Business.js');
//var User = require('./User.js');
//var Soiree = require('./Soiree.js');
/* Packages */
var shortid = require('shortid');
var _ = require("underscore");

/* Helper */
var helpersFolderLocation = "app/helpers/";
var ArrayHelper = require(helpersFolderLocation + 'ArrayHelper.js');


var DateHelper = require(helpersFolderLocation + 'DateHelper.js');
var ResHelper = require(helpersFolderLocation + 'ResHelper.js');
var CreditCardHelper = require(helpersFolderLocation + 'CreditCardHelper.js');
var LocationHelper = require(helpersFolderLocation + 'LocationHelper.js');
var PushNotificationHelper = require(helpersFolderLocation + 'PushNotificationHelper.js');
var Globals = require('app/helpers/Globals.js');
var ErrorCodes = require(helpersFolderLocation + 'ErrorCodes.js');

var autopopulate = require('mongoose-autopopulate');


var CAHQuestions = [
    "zombies _____ ron burgundy"
];

var CAHAnswers = [
    "fuckle",
    "Zombie Bill Murray",
    "all the finest titties in brooklyn",
    "sex with a talented alien",
    "a literal shitstorm"
];

var PossibleTurns = ["selecting", "judging"];

var Turns = {
    "selecting": "selecting",
    "judging": "judging"
}

var io = Globals.io;

var NumUsersMax = 5;
var StartingNumUserAnswers = 5;

var UserHand = {
    user: {type: ObjectId, ref:"User"},
    answers: [{type: String}]
};

var customSchema = new Schema({
        questionsAsked : [{type: String}],
        answersGiven : [{type: String}],
        currentTurn : {type: String, enum: PossibleTurns},
        currentUserHands: [ UserHand ],
        currentQuestion : {type: String},
        started: {type: Boolean, default: false},
        roomId : {type: String, required: true},
        _usersJoined : [{type: ObjectId, ref:"User", autopopulate: true}],
        _usersToAdd : [{type: ObjectId, ref:"User", autopopulate: true}],
        _host : {type: ObjectId, ref:"SoireeHost", autopopulate: true}
    },
    {timestamps: {createdAt: 'dateCreated', updatedAt: 'dateUpdated'}}
);

customSchema.statics.createGame = function(host){
    var newGame = new this({
       _host : host._id,
        roomId : host.roomId
    });
    newGame.save(Globals.saveErrorCallback);
    return newGame;
};


customSchema.methods.startGame = function(){
    this.currentTurn = Turns.selecting;
    this.insertUsersWaiting();
    this.sendHandsToUsers();

};

customSchema.methods.sendHandsToUsers = function(){
    console.log('sendHandsToUsers');

    var userHands = {};

    this._currentUserHands.forEach(function(hand){
        var _user = hand.user;
        userHands[_user] = hand.answers;
    });

    console.log('userHands obj: ' + userHands);

    var sockets = Globals.socketsInRoom(this.roomId);

    sockets.forEach(function(socket){
        console.log('determining if have hand for ' + socket.client.user._id);
        if (userHands[socket.client.user._id]){
            console.log('sending hand ' + userHands[socket.client.user._id]);
            socket.emit('hand', userHands[socket.client.user._id]);
        }
    });
};

customSchema.methods.insertUsersWaiting = function(){
    for (var i = 0; i < this._usersToAdd.length; i++) {
        var user = this._usersToAdd[i];
        console.log('insertUsersWaiting with user ' + user);
        if (user && this._usersJoined.indexOf(user) === -1) {
            console.log("adding user to usersJoined");
            this._usersJoined.push(user);
            this.createNewUserHand(user);
        }
    }
    this._usersToAdd = [];
    this.save(Globals.saveErrorCallback);
};

customSchema.methods.requestingStartCAH = function(socket, fn){
    this.joinUser(socket);
    this.startGame();
    //if (this.started) {
    //    console.log("socket requesting start cah. responding...");
        var responseObject = {};
        if (fn) {
            fn(responseObject);
        }
    //    else {
    //        console.log("fn passed in null");
    //    }
    //}
    //else{
    //
    //}
};

customSchema.methods.joinUser = function(socket) {
    var user = socket.client.user;

    console.log('joinUser called with ' + socket.client.user);
    if (user && this._usersJoined.indexOf(user) === -1){
        //ArrayHelper.pushOnlyOncePopulated(this, "_usersJoined", user);

        if (this.started){
            if (this._usersToAdd.indexOf(user) === -1){
                ArrayHelper.pushOnlyOncePopulated(this, "_usersToAdd", user);
                console.log('adding user to usersAdd');
            }
        }
        else{

        }
    }

};

customSchema.methods.createNewUserHand = function(user){
    var answers = this.getCAHAnswers(StartingNumUserAnswers);
    console.log("createNewUserHand with answers: " + answers);
    var hand = {user : user._id, answers: answers};

    this.currentUserHands.push(hand);

};

customSchema.methods.getCAHQuestion = function(){
    var rand = Math.random() * CAHQuestions.length;
    while(this.questionsAsked.indexOf(CAHQuestions[rand]) != -1){
        rand = Math.random() * CAHQuestions.length;
    }
    var question = CAHQuestions[rand];
    this.questionsAsked.push(question);
    this.save(Globals.saveErrorCallback);

    //io.to(this.roomId).emit('cahQuestion', question);
    //this.cahQuestionsAsked.push(question);
};


customSchema.methods.getCAHAnswers = function(num){
    var ansArr = [];
    for (var i = 0; i < num; i++) {
        ansArr.push(this.getCAHAnswer());
    }
    this.save(Globals.saveErrorCallback);
    return ansArr;
};

customSchema.methods.getCAHAnswer = function(){
    var rand = Math.random() * CAHAnswers.length;
    while (this.answersGiven.indexOf(CAHAnswers[rand]) != -1) {
        rand = Math.random() * CAHAnswers.length;
    }
    var ans = CAHAnswers[rand];
    this.answersGiven.push(ans);
    return ans;
};


customSchema.virtual('').get(function () {
});


customSchema.pre("save", function (next) {
    next();
});

customSchema.post("init", function (soiree) {

});

var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
customSchema.plugin(deepPopulate, options);
customSchema.plugin(autopopulate);

module.exports = mongoose.model("CAHGame", customSchema);
var mongoose = require('./mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;


/* Other Models */
//var Business = require('./Business.js');
//var User = require('./User.js');
//var Soiree = require('./Soiree.js');
/* Packages */
var shortid = require('shortid');
var _ = require("underscore");

/* Helper */
var helpersFolderLocation = "../helpers/";
var ArrayHelper = require(helpersFolderLocation + 'ArrayHelper.js');

var DateHelper = require(helpersFolderLocation + 'DateHelper.js');
var ResHelper = require(helpersFolderLocation + 'ResHelper.js');
var CreditCardHelper = require(helpersFolderLocation + 'CreditCardHelper.js');
var LocationHelper = require(helpersFolderLocation + 'LocationHelper.js');
var PushNotificationHelper = require(helpersFolderLocation + 'PushNotificationHelper.js');

var ErrorCodes = require(helpersFolderLocation + 'ErrorCodes.js');

var CAHQuestions = [

];

var CAHAnswers = [
    "fuckle",
    "Zombie Bill Murray",
    "all the finest titties in brooklyn",
    "sex with a talented alien",
    "a literal shitstorm"
];

var PossibleTurns = ["selecting", "judging"];
var Turns = {
    "selecting": "selecting",
    "judging": "judging"
}

var io = Globals.io;

var NumUsersMax = 5;
var StartingNumUserAnswers = 5;

var UserHand = {
    user: {type: ObjectId, ref:"User"},
    answers: [{type: String}]
};

var customSchema = new Schema({
        questionsAsked : [{type: String}],
        answersGiven : [{type: String}],
        currentTurn : {type: String, enum: PossibleTurns},
        currentUserHands: [ UserHand ],
        currentQuestion : {type: String},
        started: {type: Boolean, default: false},
        roomId : {type: String, required: true},
        _usersJoined : [{type: ObjectId, ref:"User"}],
        _usersToAdd : [{type: ObjectId, ref:"User"}],
        _host : {type: ObjectId, ref:"SoireeHost"}
    },
    {timestamps: {createdAt: 'dateCreated', updatedAt: 'dateUpdated'}}
);

customSchema.statics.createGame = function(host){
    var newGame = new this({
       _host : host._id,
        roomId : host.roomId
    });
    newGame.save(Globals.saveErrorCallback);
    return newGame;
};


customSchema.methods.startCAH = function(){
    this.currentTurn = Turns.selecting;
};

customSchema.methods.requestingStartCAH = function(socket, fn){
    if (this.started) {
        console.log("socket requesting start cah. responding...");
        var responseObject = {};
        if (fn) {
            fn(responseObject);
        }
        else {
            console.log("fn passed in null");
        }
    }
    else{

    }
    //socket.emit('start cah', []);
};

customSchema.methods.joinUser = function(user) {
    if (this._usersJoined.indexOf(user._id) === -1){
        ArrayHelper.pushOnlyOncePopulated(this, "_usersJoined", user);

        if (this.started){
            this.createNewUserHand(user);
        }
        else{

        }
    }


};

customSchema.methods.createNewUserHand = function(user){
    var answers = this.getCAHAnswers(StartingNumUserAnswers);
    var hand = {user : user._id, answers: answers};

    this.currentUserHands.push(hand);

};

customSchema.methods.getCAHQuestion = function(){
    var rand = Math.random() * CAHQuestions.length;
    while(this.questionsAsked.indexOf(CAHQuestions[rand]) != -1){
        rand = Math.random() * CAHQuestions.length;
    }
    var question = CAHQuestions[rand];
    this.questionsAsked.push(question);
    this.save(Globals.saveErrorCallback);

    //io.to(this.roomId).emit('cahQuestion', question);
    //this.cahQuestionsAsked.push(question);
};


customSchema.methods.getCAHAnswers = function(num){
    var ansArr = [];
    for (var i = 0; i < num; i++) {
        ansArr.push(this.getCAHAnswer());
    }
    this.save(Globals.saveErrorCallback);
    return ansArr;
};

customSchema.methods.getCAHAnswer = function(){
    var rand = Math.random() * CAHAnswers.length;
    while (this.answersGiven.indexOf(CAHAnswers[rand]) != -1) {
        rand = Math.random() * CAHAnswers.length;
    }
    var ans = CAHAnswers[rand];
    this.answersGiven.push(ans);
    return ans;
};

customSchema.virtual('').get(function () {
});


customSchema.pre("save", function (next) {
    next();
});

customSchema.post("init", function (soiree) {

});

var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
customSchema.plugin(deepPopulate, options);

module.exports = mongoose.model('CAHGame', customSchema);
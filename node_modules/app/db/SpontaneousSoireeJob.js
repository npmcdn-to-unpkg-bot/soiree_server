/**
 * Created by shadygabal on 1/31/16.
 */
/* Setup */
var mongoose = require('./mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;


/* Other Models */
var Business = require('./Business.js');
var Soiree = require('./Soiree.js');
var User = require('./User.js');
var Admin = require('./Admin.js');
var Image = require('./Image.js');

/* Packages */
var shortid = require('shortid');

var Globals = require('app/helpers/Globals');
var DateHelper = require('app/helpers/DateHelper');


var ssJobSchema = new Schema({
        _user : {type: ObjectId, ref: "User"},
        availableTimes : { start: {type: Date}, end: {type: Date} },
        college : {type: String, enum: Globals.colleges},
        soireeType : {type: String, enum: Globals.soireeTypes},
        done: {type: Boolean, default: false},
        failed: {type: Boolean, default: false},
        succeeded: {type: Boolean, default: false},
        scheduledTimeIdentifier : {type: String}
    },
    { timestamps: { createdAt: 'dateCreated', updatedAt: 'dateUpdated' } }
);

ssJobSchema.statics.perform = function(){
    console.log("Performing spontaneous soiree job...");

    for (var i = 0; i < Globals.colleges.length; i++){
        var college = Globals.colleges[i];

        this.performForCollege(college);
    }
};

ssJobSchema.statics.performForCollege = function(college){
    var SpontaneousSoireeJob = this;
    console.log("performing for college for: " + college);

    for (var i = 0; i < Globals.soireeTypes.length; i++){
        var soireeType = Globals.soireeTypes[i];
        this.find({college : college, soireeType: soireeType, done: false}, function(err, jobs){
            if (err){
                console.log("Error in spontaneous soiree performing: " + err);
            }
            else if (!jobs || jobs.length == 0){
                console.log("No SSJobs found for " + soireeType);
            }
            else{
                SpontaneousSoireeJob.matchSpontaneousSoirees(soireeType, jobs);
            }

        });
    }

};


ssJobSchema.statics.matchSpontaneousSoirees = function(soireeType, ssJobs){
    var buckets = {};
    for (var k = 0; k < Globals.spontaneousSoireeAvailableTimes.length; k++){
        var timeStr = Globals.spontaneousSoireeAvailableTimes[k];
        buckets[timeStr] = [];
    }
    console.log("buckets: " + JSON.stringify(buckets));


    for (var i = 0; i < ssJobs.length; i++){
        var ssJob = ssJobs[i];
        var timesAvailable = generateTimesAvailableArray(ssJob);

        for (var j = 0; j < timesAvailable.length; j++){
            buckets[timesAvailable[j]].push(ssJob.id);
        }
    }

    var jobsFilled = {};
    var minTimeStr = -1;
    var minLength = -1;


    //find index with fewest users, create first
    var findMinIndex = function() {
        minTimeStr = -1;
        minLength = -1;

        for (var k = 0; k < Globals.spontaneousSoireeAvailableTimes.length; k++) {
            var timeStr = Globals.spontaneousSoireeAvailableTimes[k];

            var arr = buckets[timeStr];
            if (arr && arr.length > 0) {

                for (var j = 0; j < arr.length; j++) {//remove duplicates
                    if (jobsFilled[arr[j]]) {
                        arr.splice(j, 1);
                    }
                }

                var length = arr.length;
                if ((length < minLength || minLength == -1) && length > 0) {
                    minLength = length;
                    minTimeStr = timeStr;
                }

            }
        }

        console.log("minLength: " + minLength + " minTimeStr " + minTimeStr);
    };

    findMinIndex();
    console.log("minLength: " + minLength + " minTimeStr " + minTimeStr);

    while (minLength != -1){
        var selectedSSJobs = buckets[minTimeStr];
        Soiree.createSoireesWithJobs(selectedSSJobs, soireeType);
        for (var a = 0; a < selectedSSJobs.length; a++){
            var ssJobId = selectedSSJobs[a];
            jobsFilled[ssJobId] = 1;
        }
        console.log("jobsFilled: " + JSON.stringify(jobsFilled));
        buckets[minTimeStr] = null;
        findMinIndex();
    };

    console.log("finished. buckets: " + JSON.stringify(buckets));
};

function generateTimesAvailableArray(ssJob){
    console.log('generating times available array for ' + JSON.stringify(ssJob.availableTimes));

    var availableTimes = ssJob.availableTimes;
    if (!availableTimes || !availableTimes.start || !availableTimes.end) return null;

    //var startDate = new Date(availableTimes.start);
    //var endDate = new Date(availableTimes.end);
    var startDate = availableTimes.start;
    var endDate = availableTimes.end;

    endDate = new Date(endDate.getTime() - (Soiree.AVERAGE_SOIREE_DURATION_IN_MS));

    console.log('startDate : ' + startDate);
    console.log('endDate : ' + endDate);

    var ans = [];

    for (var i = 0; i < Globals.spontaneousSoireeAvailableTimes.length; i++){
        var currTime = Globals.spontaneousSoireeAvailableTimes[i];
        var currDate = DateHelper.dateFromTime(currTime);
        console.log('index: ' + i + ' currTime : ' + currTime + ' date: ' + currDate.toString());

        if (endDate < currDate){
            console.log("endDate < currDate. breaking...");
            break;
        }

        if (startDate <= currDate && endDate >= currDate){
            console.log('adding ' + currDate);
            ans.push(currTime);
        }
    }

    console.log("generateAvailableTimes returning:");
    console.log(ans);

    return ans;

};



ssJobSchema.pre('save', function(next){
    //if (this.availableTimes && !this.done){
    //    var min;
    //
    //    //for (var i =0; i < this.availableTimes.length; i++){
    //        var curr = this.availableTimes;
    //        var start = curr.start;
    //        if (start){
    //            var timeIdentifier = Soiree.createScheduledTimeIdentifier(new Date(start));
    //            if (!min || timeIdentifier < min){
    //                min = timeIdentifier;
    //            }
    //        }
    //    //}
    //
    //    if (min){
    //        this.scheduledTimeIdentifier = min;
    //    }
    //}

    next();
});

var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
ssJobSchema.plugin(deepPopulate, options);

module.exports = mongoose.model('SpontaneousSoireeJob', ssJobSchema);
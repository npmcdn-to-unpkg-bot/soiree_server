/**
 * Created by shadygabal on 12/3/15.
 */

/* Setup */
var mongoose = require('./mongoose_connect.js');

var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;

/* Other Models */
var Business = require('./Business.js');
var User = require('./User.js');
var Notification = require('./Notification.js');
var CommunityComment = require('./CommunityComment.js');

/* Packages */
var shortid = require('shortid');

/* Helpers */
var helpersFolderLocation = "../helpers/";
var DateHelper = require('app/helpers/DateHelper.js');
var ResHelper = require('app/helpers/ResHelper.js');
var CreditCardHelper = require('app/helpers/CreditCardHelper.js');
var DateHelper = require('app/helpers/DateHelper.js');

var LocationHelper = require('app/helpers/LocationHelper.js');
var PushNotificationHelper = require('app/helpers/PushNotificationHelper.js');
var IdGeneratorHelper = require('app/helpers/IdGeneratorHelper.js');
var ErrorCodes = require('app/helpers/ErrorCodes.js');
var Globals = require('app/helpers/Globals.js');
var autopopulate = require('mongoose-autopopulate');

/* Schema Specific */

var postSchema = new Schema({
        text : {type: String, required: true},
        _comments : [{type: ObjectId, ref:"CommunityComment"}],
        postId: {type: String, index: true, unique: true, required: true},
        //college: {type: String, enum: Globals.colleges},
        location: {
            type: {type: String},
            coordinates: []
        },
        //author: {type: String, required: [true, "No author specified"]}, /* Author */
        //authorProfilePictureUrl : {type: String},
        _loves : [{type: ObjectId, ref:"User"}],
        //_laughs : [{type: ObjectId, ref:"User"}],
        _angries : [{type: ObjectId, ref:"User"}],
        score : {type: Number, default: 0, index: true, unique: false},

        _user : {type: ObjectId, ref:"User", autopopulate: {select : "firstName lastName profilePictureUrl userId _id"}}
},
    { timestamps: { createdAt: 'dateCreated', updatedAt: 'dateUpdated' } }
);

postSchema.index({location: '2dsphere'});


postSchema.methods.jsonObject = function(user, showComments){

    var timeIntervalSince1970InSeconds = this.dateCreated.getTime() / 1000;

    var commentsJsonArray = [];

    var obj = {
        "text" : this.text,
        "dateCreated": timeIntervalSince1970InSeconds,
        "postId": this.postId,
        "author": this.author,
        "numLoves" : this.numLoves,
        "numAngries" : this.numAngries,
        "numComments" : this.numComments
    };

    if (user){
        var lovedByUser = this._loves.indexOf(user._id) != -1;
        var angriedByUser = this._angries.indexOf(user._id) != -1;

        obj.lovedByUser = lovedByUser;
        obj.angriedByUser = angriedByUser;
    }

    if (!this.populated('_user')) {
        console.log("WARNING: Did not populate _user when retrieving CommunityPost");
    }
    else if (this._user){
        obj["author"] = this.author;
        obj["authorProfilePictureUrl"] = this._user.profilePictureUrl;
        obj["userId"] = this._user.userId;
    }

    if (showComments) {
        if (!this.populated('_comments')) {
            console.log("WARNING: Did not populate _comments when retrieving CommunityPost");
        }
        else {
            for (var i = 0; i < this._comments.length; i++) {
                var comment = this._comments[i];


                var jsonObject = comment.jsonObject(user);
                commentsJsonArray.push(jsonObject);
            }
            obj["comments"] = commentsJsonArray;
        }

    }

    return obj;
};

/* Static Methods */

postSchema.statics.findPostWithId = function(postId, successCallback, errorCallback){
    //this.findOne({postId : postId }).deepPopulate('_comments._user _user').exec(function(err, post){
    this.findOne({postId : postId }).deepPopulate('_comments._user _user').exec(function(err, post){
        if (err || !post){
            errorCallback(ErrorCodes.PostNotFound);
        }
        else{
            successCallback(post);

            //post.deepPopulate('_comments._user', function(err, _post){
            //    if (err || !_post){
            //        errorCallback(err);
            //    }
            //    else{
            //    }
            //});

        }
    });
};

postSchema.statics.findPostsForUserId = function(userId, successCallback, errorCallback) {
    if (!userId) return errorCallback(ErrorCodes.InvalidInput);

    var CommunityPost = this;

    User.findOne({userId : userId}, function(err, user){
        if (err){
            console.log(err);
            errorCallback(ErrorCodes.ErrorQuerying);
        }
        else{
            CommunityPost.find({_user : user._id}).sort('-dateCreated').exec(function(err2, posts){
               if (err){
                   console.log(err2);
                   errorCallback(ErrorCodes.ErrorQuerying);
               }
                else{
                   successCallback(posts);
               }
            });

        }
    });

};

postSchema.statics.findPosts = function(req, coors, user, successCallback, errorCallback, options){
    //this.find({ location: { $near : coors }, "college" : user.college }).deepPopulate("_comments._user _user").exec(function(err, posts){
    if (!user) return errorCallback(ErrorCodes.InvalidInput);
    if (!options) options = {};

    var numPostsToFetch = 10;

    var idsToIgnore = req.body.currentPostsIds;

    //var constraints = { location: { $near : coors }, "college" : user.college };
    var constraints = {};

    //if(user.college){
    //    constraints["college"] = user.college;
    //}

    if (idsToIgnore && idsToIgnore.length > 0){
        console.log("Ignoring posts with ids in: " + idsToIgnore);
        constraints["postId"] = {'$nin' : idsToIgnore};
    }
    //else{
    //
    //}
    var query = this.find(constraints).sort('-score').limit(numPostsToFetch);
    if (options.deepPopulate){
        query = query.deepPopulate(options.deepPopulate);
    }

    query.exec(function(err, posts){
        if (err){
            errorCallback(ErrorCodes.ErrorQuerying);
        }
        else{
            successCallback(posts);
        }
    });
};


postSchema.statics.createPost = function(post, user, successCallback, errorCallback){
    var newPost = new this(post);

    newPost._comments = [];
    newPost._user = user._id;
    //newPost.college = user.college;
    newPost.author = user.fullName;
    newPost.authorProfilePictureUrl = user.profilePictureUrl;
    newPost.location = user.location;

    newPost.save(function(err){
        if (err){
            console.log(err);
            errorCallback(ErrorCodes.ErrorSaving);
        }
        else{
            newPost._user = user;
            successCallback(newPost);
        }
    });
};

postSchema.statics.createCommentOnPost = function(postId, user, comment, successCallback, errorCallback){
    this.findOne({postId : postId}, function(err, post){
        if (err || !post){
            console.log(err);
            errorCallback(ErrorCodes.ErrorQuerying);
            //ResHelper.sendMessage(res, 404, "error finding post: " + err);
        }
        else{
            post.addComment(comment, user, successCallback
                //res.json(_comment.jsonObject(user));
                //ResHelper.sendMessage(res, 200, "created comment");
            , errorCallback);
        }
    });
};

/* Methods */

postSchema.methods.like = function(user, successCallback, errorCallback){
    if (this._likes.indexOf(user._id) == -1){
        this._likes.push(user._id);
        this.save(function(err){
           if (err){
               errorCallback(ErrorCodes.ErrorSaving);
           }
           else{
               successCallback(this);
           }
        });
    }
    else{
        //user already liked
        errorCallback();
    }

};

postSchema.methods.addComment = function(comment, user, successCallback, errorCallback){
    var post = this;

    var newComment = new CommunityComment(comment);

    newComment._post = post._id;
    newComment._user = user;
    newComment.author = user.fullName;
    newComment.authorProfilePictureUrl = user.profilePictureUrl;

    newComment.save(function(err, savedComment){
        if (err){
            console.log(err);
            errorCallback(ErrorCodes.MongoError);
        }
        else{
            post._comments.push(savedComment._id);

            post.save(function(err){
                if (err){
                    console.log(err);
                    errorCallback(ErrorCodes.MongoError);
                }
                else{
                    post.userAddedComment(user, savedComment);

                    //savedComment._user = user;
                    successCallback(savedComment);
                }
            });
        }
    });
};

postSchema.methods.emotion = function(user, emotion, successCallback, errorCallback) {
    if (emotion === "love"){
        console.log("adding " + emotion + " with user " + user._id);

        this._loves.push(user._id);
    }
    else if (emotion === "angry"){
        console.log("adding " + emotion + " with user " + user._id);

        this._angries.push(user._id);
    }

    console.log(this._loves);
    console.log(this._angries);

    this.save(function(err){
        if (err){
            errorCallback(ErrorCodes.ErrorSaving);
        }
        else{
            successCallback(this);
        }
    });

};

postSchema.methods.unemotion = function(user, emotion, successCallback, errorCallback) {
    if (emotion === "love"){
        var index = this._loves.indexOf(user._id);
        if (index != -1) {
            console.log("removing " + emotion + " with user " + user._id);
            this._loves.splice(index, 1);
        }

    }
    else if (emotion === "angry"){
        var index = this._angries.indexOf(user._id);
        if (index != -1) {
            console.log("removing " + emotion + " with user " + user._id);
            this._angries.splice(index, 1);
        }
    }

    console.log(this._loves);
    console.log(this._angries);

    this.save(function(err){
        if (err){
            errorCallback(ErrorCodes.ErrorSaving);
        }
        else{
            successCallback(this);
        }
    });

};


postSchema.methods.userAddedComment = function(user, comment){
    console.log("userAddedComment()");
    Notification.createCommentedOnPostNotifications(user, this, comment);
    //if (!this.populated("_user")){
    //    this.deepPopulate("_user", function(err, post){
    //        if (err || !post){ return; }
    //        else{
    //
    //        }
    //    });
    //}
};

postSchema.methods.calculateScore = function(){
    var today = new Date();
    var score = this.numEmotions / 2;
    score -= DateHelper.hoursFromMilliseconds(today - this.dateCreated);

    this.score = score;
};

/* Virtuals */


//postSchema.virtual('author').get(function () {
//    return this._user.fullName;
//});

postSchema.virtual('numLoves').get(function () {
    return this._loves.length;
});
//postSchema.virtual('numLaughs').get(function () {
//    return this._laughs.length;
//});
postSchema.virtual('author').get(function () {
    if (this._user)
        return this._user.fullName;
});
postSchema.virtual('numAngries').get(function () {
    return this._angries.length;
});
postSchema.virtual('numEmotions').get(function () {
    return this._angries.length + this._loves.length;
});

postSchema.virtual('numComments').get(function () {
    return this._comments.length;
});

postSchema.pre("validate", function(next) {
    if (!this.postId){
        console.log('pre validate - creating unique id');
        IdGeneratorHelper.generateUniqueId("CommunityPost", "postId", this, next, {length : 15, addLowerCase : true});
    }
    else next();
});

postSchema.pre("save", function(next){
   this.calculateScore();
    next();
});




//postSchema.virtual('college').get(function () {
//    return this._user.college;
//});

var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
postSchema.plugin(deepPopulate, options);
postSchema.plugin(autopopulate);

module.exports = mongoose.model('CommunityPost', postSchema);

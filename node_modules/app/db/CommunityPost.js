/**
 * Created by shadygabal on 12/3/15.
 */

/* Setup */
var mongoose = require('./mongoose_connect.js');

var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;

/* Other Models */
var Business = require('./Business.js');
var User = require('./User.js');
var Notification = require('./Notification.js');
//var CommunityComment = require('app/db/CommunityComment.js');

/* Packages */
var shortid = require('shortid');

/* Helpers */
var helpersFolderLocation = "../helpers/";
var DateHelper = require('app/helpers/DateHelper.js');
var ResHelper = require('app/helpers/ResHelper.js');
var CreditCardHelper = require('app/helpers/CreditCardHelper.js');
var DateHelper = require('app/helpers/DateHelper.js');

var LocationHelper = require('app/helpers/LocationHelper.js');
var PushNotificationHelper = require('app/helpers/PushNotificationHelper.js');
var IDGeneratorHelper = require('app/helpers/IDGeneratorHelper.js');
var ErrorCodes = require('app/helpers/ErrorCodes.js');
var Globals = require('app/helpers/Globals.js');
var autopopulate = require('mongoose-autopopulate');

/* Schema Specific */

var postSchema = new Schema({
        text : {type: String, required: true},
        _comments : [{type: ObjectId, ref:"CommunityComment"}],
        postId: {type: String, index: true, unique: true, required: true},
        location: {
            type: {type: String},
            coordinates: []
        },
        _upvotes : [{type: ObjectId, ref:"User"}],
        _downvotes : [{type: ObjectId, ref:"User"}],
        //score : {type: Number, default: 0, index: true, unique: false},
        rankingScore : {type: Number, default: 0, index: true, unique: false},
        _user : {type: ObjectId, ref:"User", autopopulate: {select : "firstName lastName profilePictureUrl userId _id"}},
        testNumUpvotes : {type: Number, default : -1},
        testNumUpvotes : {type: Number, default: -1}
},
    { timestamps: { createdAt: 'dateCreated', updatedAt: 'dateUpdated' } }
);

postSchema.index({location: '2dsphere'}, {required: false, unique: false});


postSchema.methods.jsonObject = function(user, showComments){

    var timeIntervalSince1970InSeconds = this.dateCreated.getTime() / 1000;

    var commentsJsonArray = [];

    var obj = {
        "text" : this.text,
        "dateCreated": timeIntervalSince1970InSeconds,
        "postId": this.postId,
        "author": this.author,
        "numComments" : this.numComments,
        "score" : this.score
    };

    if (user){
        var upvotedByUser = this._upvotes.indexOf(user._id) !== -1;
        var downvotedByUser = this._downvotes.indexOf(user._id) !== -1;

        obj.upvotedByUser = upvotedByUser;
        obj.downvotedByUser = downvotedByUser;
    }

    if (!this.populated('_user')) {
        console.log("WARNING: Did not populate _user when retrieving CommunityPost");
    }
    else if (this._user){
        obj["author"] = this.author;
        obj["authorProfilePictureUrl"] = this._user.profilePictureUrl;
        obj["userId"] = this._user.userId;
    }

    if (showComments) {
        if (!this.populated('_comments')) {
            console.log("WARNING: Did not populate _comments when retrieving CommunityPost");
        }
        else {
            for (var i = 0; i < this._comments.length; i++) {
                var comment = this._comments[i];


                var jsonObject = comment.jsonObject(user);
                commentsJsonArray.push(jsonObject);
            }
            obj["comments"] = commentsJsonArray;
        }

    }

    return obj;
};

/* Static Methods */

postSchema.statics.findPostWithId = function(postId, successCallback, errorCallback){
    //this.findOne({postId : postId }).deepPopulate('_comments._user _user').exec(function(err, post){
    this.findOne({postId : postId }).deepPopulate('_comments._user _user').exec(function(err, post){
        if (err || !post){
            errorCallback(ErrorCodes.PostNotFound);
        }
        else{
            successCallback(post);

            //post.deepPopulate('_comments._user', function(err, _post){
            //    if (err || !_post){
            //        errorCallback(err);
            //    }
            //    else{
            //    }
            //});

        }
    });
};

postSchema.statics.findPostsForUserId = function(userId, successCallback, errorCallback) {
    if (!userId) return errorCallback(ErrorCodes.InvalidInput);

    var CommunityPost = this;

    User.findOne({userId : userId}, function(err, user){
        if (err){
            console.log(err);
            errorCallback(ErrorCodes.ErrorQuerying);
        }
        else{
            CommunityPost.find({_user : user._id}).sort('-dateCreated').exec(function(err2, posts){
               if (err){
                   console.log(err2);
                   errorCallback(ErrorCodes.ErrorQuerying);
               }
                else{
                   successCallback(posts);
               }
            });

        }
    });

};

postSchema.statics.findPosts = function(req, coors, user, successCallback, errorCallback, options){
    //this.find({ location: { $near : coors }, "college" : user.college }).deepPopulate("_comments._user _user").exec(function(err, posts){
    if (!user) return errorCallback(ErrorCodes.InvalidInput);
    if (!options) options = {};

    var numPostsToFetch = 10;

    var idsToIgnore = req.body.currentPostsIds;

    //var constraints = { location: { $near : coors }, "college" : user.college };
    var constraints = {};

    //if(user.college){
    //    constraints["college"] = user.college;
    //}

    if (idsToIgnore && idsToIgnore.length > 0){
        console.log("Ignoring posts with ids in: " + idsToIgnore);
        constraints["postId"] = {'$nin' : idsToIgnore};
    }

    //else{
    //
    //}
    var query = this.find(constraints).sort('-rankingScore').limit(numPostsToFetch);
    if (options.deepPopulate){
        query = query.deepPopulate(options.deepPopulate);
    }

    query.exec(function(err, posts){
        if (err){
            errorCallback(ErrorCodes.ErrorQuerying);
        }
        else{
            successCallback(posts);
        }
    });
};


postSchema.statics.createPost = function(post, user, successCallback, errorCallback){
    var newPost = new this(post);

    newPost._user = user._id;
    newPost.author = user.fullName;
    newPost.authorProfilePictureUrl = user.profilePictureUrl;
    newPost.location = user.location;

    newPost.save(function(err){
        if (err){
            console.log(err);
            errorCallback(ErrorCodes.ErrorSaving);
        }
        else{
            successCallback(newPost);
        }
    });
};

postSchema.statics.createCommentOnPost = function(postId, user, comment, successCallback, errorCallback){
    return this.addCommentToPostWithId(postId, comment, user, successCallback, errorCallback);
};

/* Methods */

postSchema.statics.addCommentToPostWithId = function(postId, comment, user, successCallback, errorCallback){

    var CommunityComment = mongoose.model("CommunityComment");
    var newComment = new CommunityComment(comment);

    newComment._user = user;
    newComment.author = user.fullName;
    newComment.authorProfilePictureUrl = user.profilePictureUrl;

    this.findOneAndUpdate({postId : postId}, {$addToSet : {_comments : newComment._id}}, {new : true}, function(err, post){
        if (err){
            console.log(err);
            return errorCallback(ErrorCodes.MongoError);
        }
        else{
            newComment._post = post._id;
            newComment.save(function(err, comment){
                if (err){
                    return errorCallback(ErrorCodes.MongoError);
                }
                successCallback(comment);

            });
        }
    });
};


postSchema.statics.upvotePostWithId = function(postId, user, successCallback, errorCallback) {
    if (!user || !postId){
        return errorCallback(ErrorCodes.MissingData);
    }

    var updateQuery = {"$addToSet" : {"_upvotes" : user._id} , "$pull" : {"_downvotes" : user._id}};


    this.findOneAndUpdate({postId : postId}, updateQuery, {new : true}, function(err, post){
        if (err){
            console.log(err);
            return errorCallback(ErrorCodes.MongoError);
        }
        else{
            post.upvoted();
            successCallback(post);
        }
    });

};

postSchema.statics.downvotePostWithId = function(postId, user, successCallback, errorCallback) {
    if (!user || !postId){
        return errorCallback(ErrorCodes.MissingData);
    }
    
    var updateQuery = {"$pull" : {"_upvotes" : user._id}, "$addToSet" : {"_downvotes" : user._id}};

    this.findOneAndUpdate({postId : postId}, updateQuery, {new : true}, function(err, post){
        if (err){
            console.log(err);
            return errorCallback(ErrorCodes.MongoError);
        }
        else{
            post.downvoted();
            successCallback(post);
        }
    });
};

postSchema.methods.upvoted = function(){
  this.deepPopulate("_user", function(err, post){
     if (err){
         console.log(err);
         return;
     }
      var user = post._user;
      user.updateSoireeScore(Globals.soireeScorePostUpvoteIncrement);
  });
};

postSchema.methods.downvoted = function(){
    this.deepPopulate("_user", function(err, post){
        if (err){
            console.log(err);
            return;
        }
        var user = post._user;
        user.updateSoireeScore(Globals.soireeScorePostUpvoteIncrement);
    });
};


postSchema.methods.userAddedComment = function(user, comment){
    console.log("userAddedComment()");
    Notification.createCommentedOnPostNotifications(user, this, comment);
};

postSchema.methods.calculateRankingScore = function(){
    var today = new Date();
    var score = this.score / 2;
    score -= DateHelper.hoursFromMilliseconds(today - this.dateCreated)/4;

    this.rankingScore = score;
};

/* Virtuals */


//postSchema.virtual('author').get(function () {
//    return this._user.fullName;
//});


postSchema.virtual('author').get(function () {
    if (this._user)
        return this._user.fullName;
});

//postSchema.virtual('numLoves').get(function () {
//    if (this.testNumLoves >= 0){
//        return this.testNumLoves;
//    }
//    return this._upvotes.length;
//});
//postSchema.virtual('numAngries').get(function () {
//    if (this.testNumAngries >= 0){
//        return this.testNumAngries;
//    }
//    return this._angries.length;
//});
//postSchema.virtual('numEmotions').get(function () {
//    return this._angries.length + this._upvotes.length;
//});

postSchema.virtual('score').get(function () {
    return this._upvotes.length - this._downvotes.length;
});

postSchema.virtual('numComments').get(function () {
    return this._comments.length;
});

postSchema.pre("validate", function(next) {
    if (!this.postId){
        IDGeneratorHelper.generateUniqueId("CommunityPost", "postId", this, next, {length : 15, addLowerCase : true});
    }
    else next();
});

postSchema.pre("save", function(next){
    this.calculateRankingScore();
    next();
});




//postSchema.virtual('college').get(function () {
//    return this._user.college;
//});

var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
postSchema.plugin(deepPopulate, options);
postSchema.plugin(autopopulate);

module.exports = mongoose.model('CommunityPost', postSchema);

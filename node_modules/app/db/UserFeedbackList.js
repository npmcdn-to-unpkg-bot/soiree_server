var mongoose = require('./mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;


/* Other Models */
var Business = require('./Business.js');
var User = require('./User.js');
var Soiree = require('./Soiree.js');
/* Packages */
var shortid = require('shortid');
var _ = require("underscore");

/* Helper */
var helpersFolderLocation = "app/helpers/";
var DateHelper = require(helpersFolderLocation + 'DateHelper.js');
var ResHelper = require(helpersFolderLocation + 'ResHelper.js');
var CreditCardHelper = require(helpersFolderLocation + 'CreditCardHelper.js');
var LocationHelper = require(helpersFolderLocation + 'LocationHelper.js');
var PushNotificationHelper = require(helpersFolderLocation + 'PushNotificationHelper.js');
var Globals = require('app/helpers/Globals.js');

var ErrorCodes = require(helpersFolderLocation + 'ErrorCodes.js');


var feedbackTypes = Object.keys(Globals.feedbackTypes).map(function(key){
    return Globals.feedbackTypes[key];
});

var feedbackSchema = new Schema({
        userFeedback: [{
            message : {type : String},
            type : {type : String, enum : feedbackTypes},
            _user : {type : ObjectId, ref: "User"},
            _soiree : {type : ObjectId, ref : "Soiree"}
        }]
    },
    {timestamps: {createdAt: 'dateCreated', updatedAt: 'dateUpdated'}}
);

feedbackSchema.statics.addFeedback = function(pars, errorCallback, successCallback){
    var message = pars.message;
    var type = pars.type;
    var user = pars.user;
    var soireeId = pars.soireeId;

    var feedbackObj = {
        message : message,
        type: type,
        _user : user
    };
    var updateQuery = {$addToSet: {userFeedback: feedbackObj}};
    var params = {new : true, upsert : true};

    var callback = function(err, list){
        if(err){
            errorCallback(err);
        }
        else{
            successCallback(list);
        }
    };

    var feedbackList = this;

    if(soireeId) {
        Soiree.findOne({"soireeId" : soireeId}, function(err, soiree){
            if(err){
                console.log(err);
            }
            else{
                feedbackObj._soiree = soiree._id;

                feedbackList.findOneAndUpdate({}, updateQuery, params, callback);
            }
        });
    }
    else{
        feedbackList.findOneAndUpdate({}, updateQuery, params, callback);
    }

    // User.findOne({"username" : username} , function(err, user){
    //     if(err){
    //         console.log(err);
    //     }
    //     else{
    //         feedbackObj._user = user._id;
    //
    //         if(soireeId) {
    //             Soiree.findOne({"soireeId" : soireeId}, function(err, soiree){
    //                 if(err){
    //                     console.log(err);
    //                 }
    //                 else{
    //                     feedbackObj._soiree = soiree._id;
    //
    //                     feedbackList.findOneAndUpdate({}, updateQuery, params, callback);
    //                 }
    //             });
    //         }
    //         else{
    //             feedbackList.findOneAndUpdate({}, updateQuery, params, callback);
    //         }
    //     }
    // });
};

var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
feedbackSchema.plugin(deepPopulate, options);

module.exports = mongoose.model('FeedbackSchema', feedbackSchema);
/* Setup */
var mongoose = require('./mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;

/* Other Models */
var Business = require('app/db/Business.js');
var Soiree = require('app/db/Soiree.js');
var Admin = require('app/db/Admin.js');
var Notification = require('app/db/Notification.js');


/* Modules */
var shortid = require('shortid');

/* Schema Specific */
var passport = require('passport');
var bcrypt = require('bcrypt');
var jwt = require('jsonwebtoken');
var jwtUserSecret = Buffer.from(process.env.JWT_USER_SECRET, 'hex');
// var jwtUserSecret = new Buffer(process.env.JWT_USER_SECRET, 'hex');

var uniqueValidator = require('mongoose-unique-validator');

var facebookTokenStrategy = require('passport-facebook-token');

/* Helper */
var helpersFolderLocation = "../helpers/";
var Globals = require('app/helpers/Globals.js');
var CreditCardHelper = require('app/helpers/CreditCardHelper.js');
var LocationHelper = require('app/helpers/LocationHelper.js');
var ArrayHelper = require('app/helpers/ArrayHelper.js');
var ResHelper = require('app/helpers/ResHelper.js');
var IDGeneratorHelper = require('app/helpers/IDGeneratorHelper.js');
var PushNotificationHelper = require('app/helpers/PushNotificationHelper.js');
var ErrorHelper = require('app/helpers/ErrorHelper');
var EmailHelper = require('app/helpers/EmailHelper.js');

var ErrorCodes = require('app/helpers/ErrorCodes.js');

var providers = ["facebook", "userpw"];
var facebookProvider = providers[0];
var userPwProvider = providers[1];

var DefaultProfilePictureUrl = "http://www.experiencesoiree.com/images/user_default_1.jpg";
//var interestedIn = ["male", "female"];

var ScoreGainPerSoiree = 50;


var userSchema = new Schema({
		"firstName" : {type: String, trim: true, required: true}, /* Name */
		"userId" : {type: String, index: true, required: true, unique: true}, /* IDs */
		"gender" : {type: String, required : true, enum: Globals.genders}, /* Gender */
		"lastName" : {type: String, trim: true},
		"verified" : {type: Boolean, default: false}, /* Verification */
		"verificationCode" : {type: String},
		pendingVerification : {type: Boolean, default: false},
		provider: {type: String, enum: providers, lowercase: true, trim: true},
		creditCardLast4Digits : {type: String}, /* Credit Card */
		stripeCustomerId : {type: String},
		stripeDefaultCardId : {type: String},
		braintreeCustomerId : {type: String},
		braintreePaymentToken : {type: String},
		chargeable : {type: Boolean, default: false},
		interestedIn : [{type: String, lowercase: true, trim: true, enum: Globals.genders}],
		email : {type: String, index: true, unique: [true, "An account with this email address already exists"], sparse: true, trim: true, uniqueCaseInsensitive: true}, /* Email */
		password : {type: String},
		soireeAccessToken : {type: String, index: true, unique: true, sparse: true},
		birthday : {type: String}, /* Birthday */
		soireeScore : {type: Number, default: 200}, /* Soiree Score */
		facebookUserId : {type: String, index: true}, /* Facebook */
		profilePictureUrl : {type: String, default: DefaultProfilePictureUrl}, /* Profile Picture */
		phoneNumber : {type : String},
		finishedSignUp : {type : Boolean, default: false}, /* Signup */
		dateSignedUp: {type : Date, default: new Date()}, /* Dates */
		dateLastSignedIn : {type: Date, default: new Date()},
		associatedDeviceUUIDs : [{type: String}],
		pushNotificationsEnabled : {type: Boolean, default: false},
		deviceToken : {type: String},
		dateUpdated : {type: Date, default: new Date()},
		_approvedBy: {type: ObjectId, ref: "Admin"},
		_notifications : [{type: String, ref: "Notification"}],
		_unseenNotifications : [{type: String, ref: "Notification"}],
		_currentReservations : [{type: ObjectId, ref: "SoireeReservation"}],
		_pastReservations : [{type: ObjectId, ref: "SoireeReservation"}],
		testUser : {type: Boolean, default: false},
		classType : {type: String, default: "user", enum: ['user']},
		location: { /* Location */
			type: {type: String},
			coordinates: []
		}
},
	{ timestamps: { createdAt: 'dateCreated', updatedAt: 'dateUpdated' } }
);

userSchema.index({location: '2dsphere'}, {required: false, unique: false});



userSchema.pre('save', function(next){
	next();
});

/* Methods */

userSchema.methods.jsonObject = function(){
	var obj = {
		"firstName" : this.firstName,
		"lastName" : this.lastName,
		"gender" : this.gender,
		"email" : this.email,
		"age" : this.age,
		"birthday" : this.birthday,
		"userId" : this.userId,
		"finishedSignUp" : this.finishedSignUp,
		"interestedIn" : this.interestedInString,
		"profilePictureUrl" : this.profilePictureUrl,
		"facebookUserId" : this.facebookUserId,
		"verified" : this.verified,
		"soireeScore" : this.soireeScore,
		"pendingVerification" : this.pendingVerification,
		"creditCardLast4Digits" : this.creditCardLast4Digits,
		"chargeable" : this.chargeable,
		"hasDeviceToken" : this.deviceToken ? true : false,
		"numUnseenNotifications" : this.numUnseenNotifications

	};

	//if (this.populated("_notifications")){
	//	var notifications = Notification.jsonArrayFromArray(this._notifications);
	//	obj.notifications = notifications;
	//	console.log(notifications);
	//}
	if (this.populated("_currentReservations")){
		var reservations = [];
		for (var i = 0 ; i < this._currentReservations.length; i++){
			reservations.push(this._currentReservations[i].jsonObject());
		}
		obj["pendingReservations"] = reservations;
	}

	return obj;
};

userSchema.methods.verifyCode = function(code){
	return this.verificationCode == code && !this.verified;
};

userSchema.methods.findSoireesAttendingAndAttended = function(successCallback, errorCallback){
	this.deepPopulate("_currentReservations._soiree _pastReservations._soiree _currentReservations._business.businessName", function(err, _user){
		if (err){
			console.log(err);
			errorCallback(ErrorCodes.ErrorPopulating);
		}
		else{
			var soireesAttending = [], soireesAttended = [];

			for (var i = 0; i < _user._currentReservations.length; i++){
				var reservation = _user._currentReservations[i];
				var soiree = reservation._soiree;
				soiree._reservation = reservation;

				soireesAttending.push(soiree);
			}

			for (var j = 0; j < _user._pastReservations.length; j++){
				var soiree = _user._pastReservations[j]._soiree;
				soireesAttended.push(soiree);
			}

			successCallback(soireesAttending, soireesAttended);
		}
	});
};

userSchema.methods.notifyOfSoireeCancellation = function(soiree) {
	console.log("notifying user " + this.fullName + " of soiree " + soiree.soireeId + " cancellation...");

	Notification.createSoireeCancelledNotification(soiree, this);
};

userSchema.methods.notifyOfVerification = function(reason) {
	console.log("notifying user " + this.fullName + " of verification status " + this.verified);
	if (this.verified){
		Notification.createUserVerifiedNotification(this);
	}
	else{
		Notification.createUserRejectedNotification(this, reason);
	}

};

userSchema.statics.addNotificationToUserWithId = function(_id, notification) {

	var notificationId = notification._id ? notification._id : notification;

	var updateQuery = {$addToSet : {_notifications : notificationId, _unseenNotifications : notificationId} };

	this.findOneAndUpdate({_id : _id}, updateQuery, {new : true}, function(err, user){
		if (err){
			console.log(err);
		}
		PushNotificationHelper.sendNotification(user, notification);
	});

	//ArrayHelper.pushOnlyOncePopulated(this, "_notifications", notification);
	//ArrayHelper.pushOnlyOncePopulated(this, "_unseenNotifications", notification);

	//this.save(Globals.saveErrorCallback);

};

userSchema.statics.chargedUnchargedReservationForId = function(_id, reservation) {
	_id = _id._id ? _id._id : _id; //chance that object passed in is actually populated doc. if so get its _id
};

userSchema.statics.addNewReservationForId = function(_id, reservation){
	_id = _id._id ? _id._id : _id; //chance that object passed in is actually populated doc. if so get its _id
	var updateQuery = {$addToSet : {_currentReservations : reservation._id} };

	this.findOneAndUpdate({_id : _id}, updateQuery, {new : true}, function(err, newDoc){
		if (err){
			console.log(err);
		}
	});
}

//userSchema.methods.addNewReservation = function(reservation){
//	ArrayHelper.pushOnlyOncePopulated(this, "_currentReservations", reservation);
//	return this.save();
//}

userSchema.methods.generateVerificationCode = function(){
	this.verificationCode = generateVerificationCode();
	this.save();
};

function generateVerificationCode(){
	return IDGeneratorHelper.generateId(6);
}

userSchema.methods.endedSoiree = function(soiree){
	console.log("in user.endedSoiree()");

	this.deepPopulate("_currentReservations._soiree _currentReservations._business", function(err, _user){
		if (err) return console.log(err);
		for (var i = 0; i < _user._currentReservations.length; i++){
			var reservation = _user._currentReservations[i];
			//console.log("Comparing " + reservation._soiree.id + " with " + soiree.id);

			if (reservation._soiree._id.equals(soiree._id)){
				//console.log("Match. Removing from current reservations and adding to past...");
				_user._currentReservations.splice(i, 1);
				ArrayHelper.pushOnlyOnce(_user._pastReservations, reservation._id);
				//console.log("Final result: " + _user);
				_user.soireeScore += ScoreGainPerSoiree;
				_user.save(Globals.saveErrorCallback);
			};
		}
	});
};

userSchema.methods.cancelledSoiree = function(soiree){
	console.log("in user.cancelledSoiree()");

	this.deepPopulate("_currentReservations._soiree _currentReservations._business", function(err, _user){
		if (err) return console.log(err);
		for (var i = 0; i < _user._currentReservations.length; i++){
			var reservation = _user._currentReservations[i];
			//console.log("Comparing " + reservation._soiree.id + " with " + soiree.id);

			if (reservation._soiree._id.equals(soiree._id)){
				//console.log("Match. Removing from current reservations and adding to past...");
				_user._currentReservations.splice(i, 1);
				ArrayHelper.pushOnlyOnce(_user._pastReservations, reservation._id);

				//console.log("Final result: " + _user._currentReservations);
				_user.save(Globals.saveErrorCallback);
			};
		}
	});
};








/* Finding Users */

userSchema.methods.validatePassword = function(password, callback){
	bcrypt.compare(password, this.password, callback);
};


userSchema.statics.findTestUsers = function(successCallback, errorCallback){
	//if (process.env.LOCAL){
	//	this.find({testUser : true}).deepPopulate("_currentReservations _pastReservations _notifications").exec(function(err, users){
	this.find({}).deepPopulate("_currentReservations _pastReservations _notifications").sort('-dateUpdated').exec(function(err, users){
		if (err)
			errorCallback(err);
		else successCallback(users);
	});
	//return;
	//}
};

userSchema.statics.findTestUser = function(successCallback, errorCallback){
	this.find({testUser : true}).limit(1).exec(function(err, users){
		if (err || users.length == 0){
			if (errorCallback)
				errorCallback(err);
		}
		else{
			if (successCallback)
				successCallback(users[0]);
		}
	});
};

userSchema.statics.findOrCreateTestUser = function(successCallback, errorCallback){
	var User = this;

	this.findOne({firstName : 'Test', lastName : 'User', testUser : true}).exec(function(err, user){
		if (err || !user){

			console.log("test user not found. creating...");

			var newUser = new User({
				firstName: 'Test',
				lastName : 'User',
				gender : 'male',
				testUser : true,
				verified : true,
				location : LocationHelper.createPoint({longitude : 74.0059, latitude: 40.7128}),
			});
			newUser.generateNewSoireeAccessToken(function(encodedToken){
				newUser.save(function(err, _user){
					if (err){
						console.log(err);
						errorCallback();
					}
					else successCallback(_user, encodedToken);
				});
			}, function(err){
				errorCallback(err);
			}, {dontSave : true});

		}
		else successCallback(user, encodeAccessToken(user.soireeAccessToken));
	});
};




userSchema.statics.findOrCreate = function(req, successCallback, errorCallback){
	var User = this;

	var facebookUserId = req.body.facebookUserId;

	var criteria = {"facebookUserId" : facebookUserId};

	//TODO: add user/pw options

	this.findOne(criteria).exec(function(err, user){
		if (err){
			errorCallback(err);
		}
		else{
			if (!user){
				User.createUser(req, successCallback, errorCallback);
			}
			else{
				successCallback(user);
			}
		}
	});
};


userSchema.statics.findByFacebookUserId = function(facebookUserId, successCallback, errorCallback){
	console.log("Finding user with fb id: " + facebookUserId);

	this.findOne({facebookUserId : facebookUserId}).exec(function(err, user){
		if (err || !user){
			errorCallback(ErrorCodes.ErrorQuerying);
		}
		else{
			successCallback(user);
		}
	});
};

userSchema.statics.findByUserId = function(userId, successCallback, errorCallback){

	this.findOne({userId : userId}).exec(function(err, user){
		if (err || !user){
			errorCallback(ErrorCodes.ErrorQuerying);
		}
		else{
			successCallback(user);
		}
	});
};









/**** Create New User ****/

userSchema.statics.createUserWithFacebook = function(req, successCallback, errorCallback){
	console.log("Creating user facebook with data ...." + req.body);
	var facebookUserId = req.body.facebookUserId;
	var firstName = req.body.firstName;
	var lastName = req.body.lastName;
	var email = req.body.email;
	var gender = req.body.gender;
	if (gender) gender = gender.toLowerCase();

	var interestedIn = req.body.interestedIn;

	if (interestedIn){
		interestedIn = interestedIn.map(function(gender){
			return gender.toLowerCase();
		});
	}

	var birthday = req.body.birthday;

	var profilePictureUrl = req.body.profilePictureUrl;

	var latitude = req.body.latitude ? req.body.latitude : 1;
	var longitude = req.body.longitude ? req.body.longitude : 1;
	var coors = LocationHelper.createPoint({longitude : longitude, latitude: latitude});

	var newUser = new this({
		facebookUserId : facebookUserId,
		firstName : firstName,
		lastName : lastName,
		email : email,
		gender : gender,
		interestedIn : interestedIn,
		birthday : birthday,
		profilePictureUrl : profilePictureUrl,
		location : coors,
		verified: false,
		soireeScore: 200,
		provider : "facebook"
	});

	newUser.save(function(err, user){
		if (err || !user) {
			console.log("Error creating user: " + err);
			errorCallback(ErrorCodes.ErrorSaving);
		}
		else {
			//console.log("newUser: " + newUser);
			//console.log("user from save callback: " + user);
			successCallback(user);
		}
	});
};

userSchema.statics.createUserWithPassword = function(req, successCallback, errorCallback){
	console.log("Creating user email pw....");

	var User = this;
	var emailSignupData = req.body.emailSignupData;
	if (!emailSignupData) return errorCallback(ErrorCodes.MissingData);

	var password = emailSignupData.password ? emailSignupData.password.trim() : "";
	var interestedIn = emailSignupData.interestedIn;
	var firstName = emailSignupData.firstName ? emailSignupData.firstName.trim() : "";
	var lastName = emailSignupData.lastName ? emailSignupData.lastName.trim() : "";
	var email = emailSignupData.email ? emailSignupData.email.trim().toLowerCase() : "";
	var gender = emailSignupData.gender ? emailSignupData.gender.trim().toLowerCase() : "";
	var birthday = emailSignupData.birthday ? emailSignupData.birthday.trim() : "";
	var birthdayDate = emailSignupData.birthdayDate;
	var profilePictureUrl;


	if (!firstName){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: No first name specified");
	}
	if (!lastName){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: No last name specified");
	}
	if (!email || !EmailHelper.validateEmail(email)){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: Invalid Email");
	}
	if (!gender || Globals.genders.indexOf(gender) === -1){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: Invalid gender specified");
	}
	if (!password){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: No password specified");
	}
	if (password.length < 6) {
		return errorCallback(ErrorCodes.MissingData, "Error signing up: Password must be at least 6 characters long");
	}
	if (!interestedIn){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: You didn't tell us what gender you were interested in");
	}
	var invalidPasswordChars = [' '];
	for (var i = 0; i < invalidPasswordChars.length; i++){
		if(password.indexOf(invalidPasswordChars[i]) !== -1) {
			return errorCallback(ErrorCodes.MissingData, "Error signing up: Password cannot contain spaces");
		}
	}
	if (Date.now() - birthdayDate*1000 < 18 * 365 * 24 * 60 * 60 * 1000){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: You must be at least 18 years old to sign up for " + Globals.SOIREE);
	}
	interestedIn = interestedIn.map(function(gender){
		return gender.toLowerCase();
	});

	//create salt
	bcrypt.genSalt(Globals.SALT_LENGTH, function(err, salt) {
		if (err) {
			console.log("Error creating salt - User.createUserWithPassword()");
			return errorCallback(ErrorCodes.Error);
		}

		//use salt to hash password
		bcrypt.hash(password, salt, function (err, hashedPassword) {
			if (err) {
				console.log("Error generating password hash - User.createUserWithPassword()");
				return errorCallback(ErrorCodes.Error);
			}


			var latitude = req.body.latitude ? req.body.latitude : 1;
			var longitude = req.body.longitude ? req.body.longitude : 1;
			var coors = LocationHelper.createPoint({longitude : longitude, latitude: latitude});

			var newUser = new User({
				firstName : firstName,
				lastName : lastName,
				email : email,
				gender : gender,
				interestedIn : interestedIn,
				profilePictureUrl : profilePictureUrl,
				birthday : birthday,
				verified: false,
				soireeScore: 200,
				provider : "userpw",
				password : hashedPassword,
				location : coors
			});

			//generates new access token and saves it to user, then returns an encoded version
			newUser.generateNewSoireeAccessToken(function(encodedAccessToken){

				newUser.save(function(err, user){
					if (err || !user) {
						console.log("Error creating user: " + err);
						var errorMessages = ErrorHelper.errorMessagesFromError(err);
						errorCallback(ErrorCodes.ErrorSaving, errorMessages);
					}
					else {
						console.log("newUser: " + newUser);
						console.log("user from save callback: " + user);
						successCallback(user, encodedAccessToken);
					}
				});

			}, function(){
				return errorCallback(ErrorCodes.Error);
			}, {dontSave : true});

		});
	});


};






/**** Access Token ****/


function encodeAccessToken(accessToken){
	var encodedAccessToken = jwt.sign(accessToken, jwtUserSecret, {});
	return encodedAccessToken;
}

userSchema.methods.generateNewSoireeAccessToken = function(successCallback, errorCallback, options){
	var user = this;
	options = options ? options : {};

	IDGeneratorHelper.generateUniqueId("User", "soireeAccessToken", user, function(){

		//var encodedAccessToken =  jwt.sign(user.soireeAccessToken, jwtUserSecret, {});
		var encodedAccessToken = encodeAccessToken(user.soireeAccessToken);

		if (!encodedAccessToken) {
			if (!errorCallback) return; return errorCallback();
		}

		console.log("generated new access token : " + user.soireeAccessToken + " with encoded: " + encodedAccessToken);

		//user.soireeAccessToken = accessToken;

		if (options.dontSave) {
			return successCallback(encodedAccessToken);
		}

		user.save(function(err2){
			if (err2){
				console.log(err2);
				if (!errorCallback) return; return errorCallback();
			}
			successCallback(encodedAccessToken);
		});

	}, {length : Globals.ACCESS_TOKEN_LENGTH, addLowercase : true});

	//var accessToken = IDGeneratorHelper.generateId(Globals.ACCESS_TOKEN_LENGTH, {onlyLowercase:true});


};








/**** Verify User ****/

userSchema.statics.login = function(req, res, next, successCallback, errorCallback){
	var User = this;

	passport.authenticate('user-pw', function(err, user, info){
		if (err){
			console.log(err);
			errorCallback(err, null);
		}
		else if (!user){
			errorCallback(ErrorCodes.InvalidInput, info.message);
		}
		else{
			user.generateNewSoireeAccessToken(function(encodedAccessToken){
				successCallback(user, encodedAccessToken);
			}, function(){
				errorCallback(ErrorCodes.Error, null);
			});
		}
	})(req, res, next);

};

userSchema.statics.findUserByEncodedSoireeAccessToken = function(encodedAccessToken, done){
	var User = this;

	jwt.verify(encodedAccessToken, jwtUserSecret, {}, function(err, accessToken){
		if (err){
			console.log(err);
			return done(err, false);
		}

		//if (accessToken.charAt(0) === '"' && accessToken.charAt(accessToken.length-1) === '"'){
		//	//remove "" at beginning and end of string returned. caused by calling JSON.stringify on access token
		//	accessToken = JSON.parse(accessToken);
		//}

		if (accessToken){
			User.findOne({soireeAccessToken : accessToken}).exec(function(err, user){
				if (err){
					console.log(err);
					done(err, false);
				}
				else done(null, user)
			});
		}
		else done(null, false);
	});
};


userSchema.statics.verifyUser = function(req, res, next, successCallback, failureCallback){
	if (!failureCallback){
		failureCallback = function(err){
			if (!err) err = ErrorCodes.UserVerificationError;
			ResHelper.sendError(res, err);
		};
	}

	if (process.env.USE_LOCAL_DB > 0 && !Globals.heroku && !Globals.test){
		this.findTestUser(successCallback, failureCallback);
		return;
	}

	var user = req.body.user ? req.body.user : req.body;


	if (!user){
		console.log("No user passed to verifyUser");
		return failureCallback(ErrorCodes.MissingData);
	}

	var latitude = user.latitude;
	var longitude = user.longitude;
	var location;
	if (latitude && longitude) {
		location = LocationHelper.createPoint({longitude: longitude, latitude: latitude});
	}

	//console.log("fbid " + user.facebookUserId + " userid " + user.userId + " sk " + user.secretKey);

	if (user.facebook_access_token) {
		req.body.facebook_access_token = user.facebook_access_token.trim();;

		//console.log("access token found in verifyuser: " + req.body.access_token);

		passport.authenticate('facebook-token', function(err, userFound, info){
			if (err || !userFound) {
				console.log("User not found " + err + ' user ' + userFound);
				failureCallback(ErrorCodes.UserVerificationError);
			}
			else {
				console.log("User found " + userFound.userId);
				userFound.location = location;
				userFound.save(Globals.saveErrorCallback);
				successCallback(userFound);
			}
		})(req, res, next);


	}
	else if (user.soiree_access_token) {
		req.body.soiree_access_token = user.soiree_access_token.trim();
		req.body.username = "username";

		passport.authenticate('soiree-access-token', function(err, userFound, info){
			if (err){
				console.log("Error fetching user for soiree token " + err);
			}
			else if (!userFound) {
				console.log("User not found soiree access token " + err);
				failureCallback(ErrorCodes.InvalidSoireeAccessToken);
			}
			else {
				console.log("User found " + userFound.userId);
				//userFound.location = location;
				//userFound.save(Globals.saveErrorCallback);
				successCallback(userFound);
			}
		})(req, res, next);

	}
	else {
		console.log("No facebook_access_token or soiree_access_token");
		failureCallback(ErrorCodes.InvalidInput);
	}
};



/* Virtuals */

userSchema.virtual('age').get(function(){
	var birthdate = new Date(this.birthday);
	var age = (Date.now() - birthdate) / (1000 * 60 * 60 * 24 * 365.25);
	return parseInt(age);
});

userSchema.virtual('hasStripeCustomerId').get(function(){
	console.log("stripeCustomerId : "+ this.stripeCustomerId);
	return this.stripeCustomerId ? true : false;
});

userSchema.virtual('currentDeviceUUID').get(function() {
	if (this.associatedDeviceUUIDs.length <= 0)
		return "";
	return this.associatedDeviceUUIDs[this.associatedDeviceUUIDs.length-1];
});

userSchema.virtual('fullName').get(function(){
	if (!this.lastName)
		return this.firstName;
	else if (!this.firstName)
		return this.lastName;

	return this.firstName + " " + this.lastName;
});

userSchema.virtual('isMale').get(function(){
	return this.gender === 'male';
});

userSchema.virtual('numUnseenNotifications').get(function() {
	return this._unseenNotifications.length;
});

userSchema.virtual('isFemale').get(function(){
	return this.gender === 'female';
});

userSchema.virtual('interestedInString').get(function(){
	if (this.interestedIn.indexOf('male') !== -1){
		if (this.interestedIn.indexOf('female') !== -1){
			return "Men and Women";
		}
		else return "Men";
	}
	else if (this.interestedIn.indexOf('female') !== -1){
		return "Women";
	}
	return "Nobody";
});


userSchema.pre("validate", function(next) {
	if (!this.userId){
		IDGeneratorHelper.generateUniqueId("User", "userId", this, next, {length : 15, addLowerCase : true});
	}
	else next();
});


userSchema.pre("save", function(next) {
	//if (this.isNew && Array.isArray(this.location) && 0 === this.location.length) {
	//	this.location = undefined;
	//}
	if (this.testUser && !Globals.devOrTest){
		return next("Error");
	}
	if (!this.verified && !this.verificationCode) {
		this.verificationCode = generateVerificationCode();
	}
	next();
});

userSchema.pre("remove", function(next){
	console.log("preremove called with " + this);

	mongoose.model("CommunityPost").find({_user : this._id}, function(err, posts){
		if (err) console.log(err);
		else{
			posts.forEach(function(post){
				post.remove();
			});
		}
	});
	mongoose.model("CommunityComment").find({_user : this._id}, function(err, comments){
		if (err) console.log(err);
		else{
			comments.forEach(function(comment){
				comment.remove();
			});
		}
	});
	mongoose.model("Notification").find({_user : this._id}, function(err, notifications){
		if (err) console.log(err);
		else{
			notifications.forEach(function(notification){
				notification.remove();
			});
		}
	});


	next();


});

var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
userSchema.plugin(deepPopulate, options);
userSchema.plugin(uniqueValidator, {message: '{PATH} already taken. Please try again.' });

module.exports = mongoose.model('User', userSchema);


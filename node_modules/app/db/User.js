/* Setup */
var mongoose = require('./mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;

/* Other Models */
var Business = require('./Business.js');
var Soiree = require('./Soiree.js');
var SoireeReservation = require('./SoireeReservation.js');
var Admin = require('./Admin.js');
var Notification = require('./Notification.js');


/* Modules */
var shortid = require('shortid');

/* Schema Specific */
var passport = require('passport');
var bcrypt = require('bcrypt');
var jwt = require('jwt-simple');
var jwtUserSecret = Buffer.from(process.env.JWT_USER_SECRET, 'hex');

var facebookTokenStrategy = require('passport-facebook-token');

/* Helper */
var helpersFolderLocation = "../helpers/";
var Globals = require('app/helpers/Globals.js');
var CreditCardHelper = require('app/helpers/CreditCardHelper.js');
var LocationHelper = require('app/helpers/LocationHelper.js');
var ArrayHelper = require('app/helpers/ArrayHelper.js');
var ResHelper = require('app/helpers/ResHelper.js');
var IdGeneratorHelper = require('app/helpers/IdGeneratorHelper.js');
var PushNotificationHelper = require('app/helpers/PushNotificationHelper.js');
var ErrorHelper = require('app/helpers/ErrorHelper');

var ErrorCodes = require('app/helpers/ErrorCodes.js');

var providers = ["facebook", "userpw"];
var facebookProvider = providers[0];
var userPwProvider = providers[1];

//var interestedIn = ["male", "female"];

var ScoreGainPerSoiree = 50;


var userSchema = new Schema({
		"firstName" : {type: String, trim: true, required: true}, /* Name */
		"userId" : {type: String, index: true, required: true, unique: true}, /* IDs */
		"gender" : {type: String, required : true, enum: Globals.genders}, /* Gender */
		"lastName" : {type: String, trim: true},
		"verified" : {type: Boolean, default: false}, /* Verification */
		"verificationCode" : {type: String},
		pendingVerification : {type: Boolean, default: false},
		provider: {type: String, enum: providers, lowercase: true, trim: true},
		creditCardLast4Digits : {type: String}, /* Credit Card */
		stripeCustomerId : {type: String},
		stripeDefaultCardId : {type: String},
		braintreeCustomerId : {type: String},
		braintreePaymentToken : {type: String},
		chargeable : {type: Boolean, default: false},
		interestedIn : [{type: String, lowercase: true, trim: true, enum: Globals.genders}],
		email : {type: String, index: true, unique: [true, "An account with this email address already exists"], sparse: true, trim: true, uniqueCaseInsensitive: true}, /* Email */
		password : {type: String},
		soireeAccessToken : {type: String, index: true, sparse: true},
		birthday : {type: String}, /* Birthday */
		soireeScore : {type: Number, default: 200}, /* Soiree Score */
		facebookUserId : {type: String, index: true}, /* Facebook */
		profilePictureUrl : {type: String}, /* Profile Picture */
		phoneNumber : {type : String},
		finishedSignUp : {type : Boolean, default: false}, /* Signup */
		dateSignedUp: {type : Date, default: new Date()}, /* Dates */
		dateLastSignedIn : {type: Date, default: new Date()},
		associatedDeviceUUIDs : [{type: String}],
		pushNotificationsEnabled : {type: Boolean, default: false},
		deviceToken : {type: String},
		dateUpdated : {type: Date, default: new Date()},
		_approvedBy: {type: ObjectId, ref: "Admin"},
		_notifications : [{type: String, ref: "Notification"}],
		_unseenNotifications : [{type: String, ref: "Notification"}],
		classType : {type: String, default: 'user', enum: ['user']},
		_currentReservations : [{type: ObjectId, ref: "SoireeReservation"}],
		_pastReservations : [{type: ObjectId, ref: "SoireeReservation"}],
		testUser : {type: Boolean, default: false},
		classType : {type: String, default: "user", enum: ['user']},
		location: { /* Location */
			type: {type: String},
			coordinates: []
		}
},
	{ timestamps: { createdAt: 'dateCreated', updatedAt: 'dateUpdated' } }
);

userSchema.index({location: '2dsphere'}, {required: false, unique: false});



userSchema.pre('save', function(next){
	//determine age

	//set date updated
	this.dateUpdated = new Date();

	if (!this.associatedDeviceUUIDs){
		this.associatedDeviceUUIDs = [];
	}

	next();
});

/* Methods */

userSchema.methods.jsonObject = function(){
	console.log("in user jsonObj()");

	var obj = {
		"firstName" : this.firstName,
		"lastName" : this.lastName,
		"gender" : this.gender,
		"email" : this.email,
		"age" : this.age,
		"birthday" : this.birthday,
		"userId" : this.userId,
		"finishedSignUp" : this.finishedSignUp,
		"interestedIn" : this.interestedIn,
		"profilePictureUrl" : this.profilePictureUrl,
		"facebookUserId" : this.facebookUserId,
		"verified" : this.verified,
		"soireeScore" : this.soireeScore,
		"pendingVerification" : this.pendingVerification,
		"creditCardLast4Digits" : this.creditCardLast4Digits,
		"chargeable" : this.chargeable,
		"hasDeviceToken" : this.deviceToken ? true : false,
		"numUnseenNotifications" : this.numUnseenNotifications

	};

	//if (this.populated("_notifications")){
	//	var notifications = Notification.jsonArrayFromArray(this._notifications);
	//	obj.notifications = notifications;
	//	console.log(notifications);
	//}
	if (this.populated("_currentReservations")){
		var reservations = [];
		for (var i = 0 ; i < this._currentReservations.length; i++){
			reservations.push(this._currentReservations[i].jsonObject());
		}
		obj["pendingReservations"] = reservations;
	}

	return obj;
};

userSchema.methods.verifyCode = function(code){
	return this.verificationCode == code && !this.verified;
};

userSchema.methods.findSoireesAttendingAndAttended = function(successCallback, errorCallback){
	this.deepPopulate("_currentReservations._soiree _pastReservations._soiree _currentReservations._business.businessName", function(err, _user){
		if (err){
			console.log(err);
			errorCallback(ErrorCodes.ErrorPopulating);
		}
		else{
			var soireesAttending = [], soireesAttended = [];

			for (var i = 0; i < _user._currentReservations.length; i++){
				var reservation = _user._currentReservations[i];
				var soiree = reservation._soiree;
				soiree._reservation = reservation;

				soireesAttending.push(soiree);
			}

			for (var j = 0; j < _user._pastReservations.length; j++){
				var soiree = _user._pastReservations[j]._soiree;
				soireesAttended.push(soiree);
			}

			successCallback(soireesAttending, soireesAttended);
		}
	});
};

userSchema.methods.checkDeviceUUIDAndDeviceToken = function(req, callback){
	var deviceUUID = req.body.deviceUUID;
	var deviceToken = req.body.deviceToken;
	var pushNotificationsEnabled = req.body.pushNotificationsEnabled;

	if (!deviceUUID && !deviceToken) {
		callback();
	}

	var user = this;
	var save = false;

	if (pushNotificationsEnabled){
		if (user.pushNotificationsEnabled != pushNotificationsEnabled){
			user.pushNotificationsEnabled = pushNotificationsEnabled;
			save = true;
		}
	}

	if (deviceToken && deviceToken != user.deviceToken){ //if have new device token
		user.deviceToken = deviceToken;
		save = true;
	}

	if (deviceUUID){//if have device uuid
		save = true;

		if (!user.associatedDeviceUUIDs){
			user.associatedDeviceUUIDs = [];
		}
		else {
			var index = user.associatedDeviceUUIDs.indexOf(deviceUUID); //does device uuid currently exist


			if (index == -1) { //if not
				user.associatedDeviceUUIDs.push(deviceUUID); // login from new device. create device uuid and set stripe customer id to null to prevent fraud
				console.log("setting stripecustomerid to null...");
				user.stripeCustomerId = null;
			}
			else {
				if (user.associatedDeviceUUIDs.length > 1 &&  index != user.associatedDeviceUUIDs.length - 1) { //if device uuid was not last device uuid
					ArrayHelper.move(user.associatedDeviceUUIDs, index, user.associatedDeviceUUIDs.length - 1); //set it to the last device uuid
				}
				else save = false; //else if it was the last then no need to save
			}
		}
	}

	if (save) {
		user.save(function (err, u) {
			//console.log("saved deviceuuid with err:" + err + "new deviceuuids: " + u.associatedDeviceUUIDs);
			if (err)
				console.log("Error saving in checkDeviceUUIDAndDeviceToken: " + err);
			callback();
		});
	}

	else{
		callback();
	}
};

userSchema.methods.validatePassword = function(password, callback){
	bcrypt.compare(password, this.password, callback);
};

userSchema.methods.notifyOfSoireeCancellation = function(soiree) {
	console.log("notifying user " + this.fullName + " of soiree " + soiree.soireeId + " cancellation...");

	Notification.createSoireeCancelledNotification(soiree, this);
};

userSchema.methods.notifyOfVerification = function(reason) {
	console.log("notifying user " + this.fullName + " of verification status " + this.verified);
	if (this.verified){
		Notification.createUserVerifiedNotification(this);
	}
	else{
		Notification.createUserRejectedNotification(this, reason);
	}

};

userSchema.methods.addNotification = function(notification) {
	//console.log("before add: " + this._notifications);
	ArrayHelper.pushOnlyOncePopulated(this, "_notifications", notification);
	//console.log("after add: " + this._notifications);
	ArrayHelper.pushOnlyOncePopulated(this, "_unseenNotifications", notification);

	//this.numUnseenNotifications++;
	this.save(Globals.saveErrorCallback);
	PushNotificationHelper.sendNotification(this, notification);

};

userSchema.statics.findUserByEncodedSoireeAccessToken = function(encodedAccessToken, done){
	console.log('decoding token ' + encodedAccessToken);

	var decoded = jwt.decode(encodedAccessToken, jwtUserSecret);
	if (!decoded) callback(null, false);

	var accessToken = decoded[soireeAccessToken];
	console.log('finding user with token ' + accessToken);

	if (accessToken){
		var User = this;

		User.findOne({soireeAccessToken : accessToken}).exec(function(err, user){
			if (err){
				console.log(err);
				done(err, false);
			}
			else done(null, user)
		});
	}
	else done(null, false);
};


userSchema.methods.validateSoireeAccessToken = function(encodedAccessToken, callback){
	if (!this.soireeAccessToken) return callback(null, false);

	var decoded = jwt.decode(encodedAccessToken, jwtUserSecret);
	if (!decoded) callback(null, false);

	var accessToken = decoded[soireeAccessToken];
	if (accessToken){
		if (this.soireeAccessToken === accessToken){
			return callback(null, true);
		}
		else return callback(null, false);
	}
	else{
		callback(null, false);
	}
};

userSchema.methods.generateVerificationCode = function(){
	this.verificationCode = generateVerificationCode();
	this.save();
};

function generateVerificationCode(){
	return IdGeneratorHelper.generateId(6);
}

userSchema.methods.endedSoiree = function(soiree){
	console.log("in user.endedSoiree()");

	this.deepPopulate("_currentReservations._soiree _currentReservations._business", function(err, _user){
		if (err) return console.log(err);
		for (var i = 0; i < _user._currentReservations.length; i++){
			var reservation = _user._currentReservations[i];
			//console.log("Comparing " + reservation._soiree.id + " with " + soiree.id);

			if (reservation._soiree._id.equals(soiree._id)){
				//console.log("Match. Removing from current reservations and adding to past...");
				_user._currentReservations.splice(i, 1);
				ArrayHelper.pushOnlyOnce(_user._pastReservations, reservation._id);
				//console.log("Final result: " + _user);
				_user.soireeScore += ScoreGainPerSoiree;
				_user.save(Globals.saveErrorCallback);
			};
		}
	});
};

userSchema.methods.cancelledSoiree = function(soiree){
	console.log("in user.cancelledSoiree()");

	this.deepPopulate("_currentReservations._soiree _currentReservations._business", function(err, _user){
		if (err) return console.log(err);
		for (var i = 0; i < _user._currentReservations.length; i++){
			var reservation = _user._currentReservations[i];
			//console.log("Comparing " + reservation._soiree.id + " with " + soiree.id);

			if (reservation._soiree._id.equals(soiree._id)){
				//console.log("Match. Removing from current reservations and adding to past...");
				_user._currentReservations.splice(i, 1);
				ArrayHelper.pushOnlyOnce(_user._pastReservations, reservation._id);

				//console.log("Final result: " + _user._currentReservations);
				_user.save(Globals.saveErrorCallback);
			};
		}
	});
};

/* Statics */


userSchema.statics.findOrCreate = function(req, successCallback, errorCallback){
	var User = this;

	var facebookUserId = req.body.facebookUserId;

	var criteria = {"facebookUserId" : facebookUserId};

	//TODO: add user/pw options

	this.findOne(criteria).exec(function(err, user){
		if (err){
			errorCallback(err);
		}
		else{
			if (!user){
				User.createUser(req, successCallback, errorCallback);
			}
			else{
				successCallback(user);
			}
		}
	});
};


userSchema.statics.findByFacebookUserId = function(facebookUserId, successCallback, errorCallback){
	console.log("Finding user with fb id: " + facebookUserId);

	this.findOne({facebookUserId : facebookUserId}).exec(function(err, user){
		if (err){
			errorCallback(err);
		}
		else{
			successCallback(user);
		}
	});
};

userSchema.statics.createUserWithFacebook = function(req, successCallback, errorCallback){
	console.log("Creating user facebook....");
	var facebookUserId = req.body.facebookUserId;
	var firstName = req.body.firstName;
	var lastName = req.body.lastName;
	var email = req.body.email;
	var gender = req.body.gender;
	if (gender) gender = gender.toLowerCase();

	var interestedIn = req.body.interestedIn;

	if (interestedIn){
		interestedIn = interestedIn.map(function(gender){
			return gender.toLowerCase();
		});
	}

	var birthday = req.body.birthday;

	var deviceUUID = req.deviceUUID;
	var deviceToken = req.deviceToken;

	var profilePictureUrl = req.body.profilePictureUrl;

	var latitude = req.body.latitude ? req.body.latitude : 1;
	var longitude = req.body.longitude ? req.body.longitude : 1;
	var coors = LocationHelper.createPoint({longitude : longitude, latitude: latitude});

	var newUser = new this({
		facebookUserId : facebookUserId,
		firstName : firstName,
		lastName : lastName,
		email : email,
		gender : gender,
		interestedIn : interestedIn,
		birthday : birthday,
		profilePictureUrl : profilePictureUrl,
		associatedDeviceUUIDs : [deviceUUID],
		location : coors,
		verified: false,
		soireeScore: 200,
		provider : "facebook"
	});

	newUser.deviceToken = deviceToken;

	newUser.save(function(err, user){
		if (err || !user) {
			console.log("Error creating user: " + err);
			errorCallback(ErrorCodes.ErrorSaving);
		}
		else {
			//console.log("newUser: " + newUser);
			//console.log("user from save callback: " + user);
			successCallback(user);
		}
	});
};

userSchema.methods.generateNewSoireeAccessToken = function(){
	var accessToken = IdGeneratorHelper.generateId(Globals.ACCESS_TOKEN_LENGTH, {onlyLowercase:true});
	var encodedAccessToken = jwt.encode({soireeAccessToken : accessToken}, jwtUserSecret);
	this.soireeAccessToken = accessToken;
	console.log("generated new access token : " + accessToken + " with encoded: " + encodedAccessToken);
	return encodedAccessToken;
};

userSchema.statics.createUserWithPassword = function(req, successCallback, errorCallback){
	console.log("Creating user email pw....");

	var User = this;
	var emailSignupData = req.body.emailSignupData;
	if (!emailSignupData) return errorCallback(ErrorCodes.MissingData);

	var password = emailSignupData.password;

	if (!password){
		console.log("missing password");
		return errorCallback(ErrorCodes.MissingData);
	}

	var interestedIn = emailSignupData.interestedIn;
	if (interestedIn){
		interestedIn = interestedIn.map(function(gender){
			return gender.toLowerCase();
		});
		emailSignupData.interestedIn = interestedIn;
	}

	//create salt
	bcrypt.genSalt(Globals.SALT_LENGTH, function(err, salt) {
		if (err) {
			console.log("Error creating salt - User.createUserWithPassword()");
			return errorCallback(ErrorCodes.Error);
		}

		//use salt to hash password
		bcrypt.hash(password, salt, function (err, hashedPassword) {
			if (err) {
				console.log("Error generating password hash - User.createUserWithPassword()");
				return errorCallback(ErrorCodes.Error);
			}

			var firstName = emailSignupData.firstName;
			var lastName = emailSignupData.lastName;
			var email = emailSignupData.email;
			var gender = emailSignupData.gender;
			var interestedIn = emailSignupData.interestedIn;
			var birthday = emailSignupData.birthday;

			var deviceUUID = req.deviceUUID;
			//var deviceToken = req.deviceToken;

			var profilePictureUrl;

			var latitude = req.body.latitude ? req.body.latitude : 1;
			var longitude = req.body.longitude ? req.body.longitude : 1;
			var coors = LocationHelper.createPoint({longitude : longitude, latitude: latitude});

			var newUser = new User({
				firstName : firstName,
				lastName : lastName,
				email : email,
				gender : gender,
				interestedIn : interestedIn,
				profilePictureUrl : profilePictureUrl,
				birthday : birthday,
				associatedDeviceUUIDs : [deviceUUID],
				verified: false,
				soireeScore: 200,
				provider : "userpw",
				password : hashedPassword,
				location : coors
			});

			//generates new access token and saves it to user, then returns an encoded version
			var encodedAccessToken = newUser.generateNewSoireeAccessToken();


			newUser.save(function(err, user){
				if (err || !user) {
					console.log("Error creating user: " + err);
					var errorMessages = ErrorHelper.errorMessagesFromError(err);
					errorCallback(ErrorCodes.ErrorSaving, errorMessages);
				}
				else {
					console.log("newUser: " + newUser);
					console.log("user from save callback: " + user);
					successCallback(user, encodedAccessToken);
				}
			});

		});
	});


};

userSchema.statics.findTestUsers = function(successCallback, errorCallback){
	//if (process.env.LOCAL){
	//	this.find({testUser : true}).deepPopulate("_currentReservations _pastReservations _notifications").exec(function(err, users){
	this.find({}).deepPopulate("_currentReservations _pastReservations _notifications").exec(function(err, users){
		if (err)
				errorCallback(err);
			else successCallback(users);
		});
		//return;
	//}
};

userSchema.statics.findTestUser = function(successCallback, errorCallback){
	this.find({testUser : true}).limit(1).exec(function(err, users){
		if (err || users.length == 0){
			if (errorCallback)
				errorCallback(err);
		}
		else{
			if (successCallback)
				successCallback(users[0]);
		}
	});
};

userSchema.statics.findOrCreateTestUser = function(successCallback, errorCallback){
	var User = this;

	this.findOne({firstName : 'Test', lastName : 'User', testUser : true}).exec(function(err, user){
		if (err || !user){

			var newUser = new User({
				firstName: 'Test',
				lastName : 'User',
				gender : 'male',
				testUser : true,
				location : LocationHelper.createPoint({longitude : 74.0059, latitude: 40.7128}),
			});
			newUser.save(function(err, _user){
				if (err){
					console.log(err);
					errorCallback();
				}
				else successCallback(_user);
			});
		}
		else successCallback(user);
	});
};


userSchema.statics.verifyUser = function(req, res, next, successCallback, failureCallback){
	if (!failureCallback){
		failureCallback = function(err){
			if (!err) err = ErrorCodes.UserVerificationError;
			ResHelper.sendError(res, err);
		};
	}

	if (process.env.USE_LOCAL_DB && !Globals.heroku && !Globals.test){
		this.findTestUser(successCallback, failureCallback);
		return;
	}

	var user = req.body.user;


	if (!user){
		console.log("No user passed to verifyUser");
		return failureCallback(ErrorCodes.MissingData);
	}

	var latitude = user.latitude;
	var longitude = user.longitude;
	var location = LocationHelper.createPoint({longitude : longitude, latitude : latitude});

	//console.log("fbid " + user.facebookUserId + " userid " + user.userId + " sk " + user.secretKey);

	if (user.facebook_access_token) {
		req.body.facebook_access_token = user.facebook_access_token;

		//console.log("access token found in verifyuser: " + req.body.access_token);

		passport.authenticate('facebook-token', function(err, userFound, info){
			if (err || !userFound) {
				console.log("User not found " + err);
				failureCallback(ErrorCodes.UserVerificationError);
			}
			else {
				console.log("User found " + userFound.userId);
				userFound.location = location;
				userFound.save(Globals.saveErrorCallback);
				successCallback(userFound);
			}
		})(req, res, next);


	}
	else if (user.soiree_access_token) {
		req.body.soiree_access_token = user.soiree_access_token;
		req.body.username = "username";

		passport.authenticate('soiree-access-token', function(err, userFound, info){
			if (err || !userFound) {
				console.log("User not found soiree access token " + err);
				failureCallback(ErrorCodes.UserVerificationError);
			}
			else {
				console.log("User found " + userFound.userId);
				userFound.location = location;
				userFound.save(Globals.saveErrorCallback);
				successCallback(userFound);
			}
		})(req, res, next);

	}
	else {
		console.log("No facebook_access_token or soiree_access_token");
		failureCallback(ErrorCodes.InvalidInput);
	}
};



/* Virtuals */

userSchema.virtual('age').get(function(){
	var birthdate = new Date(this.birthday);
	var age = (Date.now() - birthdate) / (1000 * 60 * 60 * 24 * 365.25);
	return parseInt(age);
});

userSchema.virtual('hasStripeCustomerId').get(function(){
	console.log("stripeCustomerId : "+ this.stripeCustomerId);
	return this.stripeCustomerId ? true : false;
});

userSchema.virtual('currentDeviceUUID').get(function() {
	if (this.associatedDeviceUUIDs.length <= 0)
		return "";
	return this.associatedDeviceUUIDs[this.associatedDeviceUUIDs.length-1];
});

userSchema.virtual('fullName').get(function(){
	if (!this.lastName)
		return this.firstName;
	else if (!this.firstName)
		return this.lastName;

	return this.firstName + " " + this.lastName;
});

userSchema.virtual('isMale').get(function(){
	return this.gender === 'male';
});

userSchema.virtual('numUnseenNotifications').get(function() {
	return this._unseenNotifications.length;
});

userSchema.virtual('isFemale').get(function(){
	return this.gender === 'female';
});

userSchema.pre("validate", function(next) {
	if (!this.userId){
		IdGeneratorHelper.generateUniqueId("User", "userId", this, next, {length : 15, addLowerCase : true});
	}
	else next();
});


userSchema.pre("save", function(next) {
	//if (this.isNew && Array.isArray(this.location) && 0 === this.location.length) {
	//	this.location = undefined;
	//}
	if (this.testUser && !Globals.devOrTest){
		return next("Error");
	}
	if (!this.verified && !this.verificationCode) {
		this.verificationCode = generateVerificationCode();
	}
	next();
});

userSchema.pre("remove", function(next){
	console.log("preremove called with " + this);

	mongoose.model("CommunityPost").find({_user : this._id}, function(err, posts){
		if (err) console.log(err);
		else{
			posts.forEach(function(post){
				post.remove();
			});
		}
	});
	mongoose.model("CommunityComment").find({_user : this._id}, function(err, comments){
		if (err) console.log(err);
		else{
			comments.forEach(function(comment){
				comment.remove();
			});
		}
	});
	mongoose.model("Notification").find({_user : this._id}, function(err, notifications){
		if (err) console.log(err);
		else{
			notifications.forEach(function(notification){
				notification.remove();
			});
		}
	});


	next();


});

var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
userSchema.plugin(deepPopulate, options);

module.exports = mongoose.model('User', userSchema);


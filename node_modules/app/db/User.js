/* Setup */
var mongoose = require('./mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;

/* Other Models */
var Business = require('app/db/Business.js');
var Soiree = require('app/db/Soiree.js');
var Admin = require('app/db/Admin.js');
var Notification = require('app/db/Notification.js');


/* Modules */
var shortid = require('shortid');

/* Schema Specific */
var passport = require('passport');
var bcrypt = require('bcrypt');
var jwt = require('jsonwebtoken');
var jwtUserSecret = Buffer.from(process.env.JWT_USER_SECRET, 'hex');
// var jwtUserSecret = new Buffer(process.env.JWT_USER_SECRET, 'hex');

var uniqueValidator = require('mongoose-unique-validator');

var facebookTokenStrategy = require('passport-facebook-token');

/* Helper */
var helpersFolderLocation = "../helpers/";
var Globals = require('app/helpers/Globals.js');
var CreditCardHelper = require('app/helpers/CreditCardHelper.js');
var LocationHelper = require('app/helpers/LocationHelper.js');
var ArrayHelper = require('app/helpers/ArrayHelper.js');
var ResHelper = require('app/helpers/ResHelper.js');
var IDGeneratorHelper = require('app/helpers/IDGeneratorHelper.js');
var PushNotificationHelper = require('app/helpers/PushNotificationHelper.js');
var ErrorHelper = require('app/helpers/ErrorHelper');
var EmailHelper = require('app/helpers/EmailHelper.js');

var ErrorCodes = require('app/helpers/ErrorCodes.js');

var providers = ["facebook", "userpw"];
var facebookProvider = providers[0];
var userPwProvider = providers[1];

var DefaultProfilePictureUrl = "http://www.experiencesoiree.com/images/user_default_1.jpg";
//var interestedIn = ["male", "female"];

var ScoreGainPerSoiree = 50;

var UserProfileQuestions = [
	"You wake up one day and discover that you're in Donald Trump's body. What do you do?",
	"Tell us two truths and one lie about yourself.",
	"What is the one thing in the world that you hate the most?"
];

var userSchema = new Schema({
		firstName : {type: String, trim: true, required: true}, /* Name */
		userId : {type: String, index: true, required: true, unique: true}, /* IDs */
		gender : {type: String, required : true, enum: Globals.genders}, /* Gender */
		lastName : {type: String, trim: true},
		verified : {type: Boolean, default: false}, /* Verification */
		verificationCode : {type: String},
		pendingVerification : {type: Boolean, default: false},
		verificationImageUrl : {type: String},
		provider: {type: String, enum: providers, lowercase: true, trim: true},
		creditCardLast4Digits : {type: String}, /* Credit Card */
		stripeCustomerId : {type: String},
		stripeDefaultCardId : {type: String},
		braintreeCustomerId : {type: String},
		braintreePaymentToken : {type: String},
		chargeable : {type: Boolean, default: false},
		interestedIn : [{type: String, lowercase: true, trim: true, enum: Globals.genders}],
		email : {type: String, index: true, unique: [true, "An account with this email address already exists"], sparse: true, trim: true, uniqueCaseInsensitive: true}, /* Email */
		password : {type: String},
		soireeAccessToken : {type: String, index: true, unique: true, sparse: true},
		birthday : {type: String}, /* Birthday */
		soireeScore : {type: Number, default: 200}, /* Soiree Score */
		facebookUserId : {type: String, index: true}, /* Facebook */
		profilePictureUrl : {type: String, default: DefaultProfilePictureUrl}, /* Profile Picture */
		phoneNumber : {type : String},
		finishedSignUp : {type : Boolean, default: false},/* Signup */
		askedForFeedback : {type : Boolean, default: false},/* Feedback */
		dateSignedUp: {type : Date, default: new Date()}, /* Dates */
		dateLastSignedIn : {type: Date, default: new Date()},
		associatedDeviceUUIDs : [{type: String}],
		pushNotificationsEnabled : {type: Boolean, default: false},
		deviceToken : {type: String},
		dateUpdated : {type: Date, default: new Date()},
		_approvedBy: {type: ObjectId, ref: "Admin"},
		_notifications : [{type: String, ref: "Notification"}],
		_unseenNotifications : [{type: String, ref: "Notification"}],
		_currentReservations : [{type: ObjectId, ref: "SoireeReservation"}],
		_pastReservations : [{type: ObjectId, ref: "SoireeReservation"}],
		testUser : {type: Boolean, default: false},
		classType : {type: String, default: "user", enum: ['user']},
		location: { /* Location */
			type: {type: String},
			coordinates: []
		},
		profile: {
			description : {type: String, default: "I'm, like, really cool and stuff."},
			question1: {
				question: {type: String, default: UserProfileQuestions[0]},
				answer: String
			},
			question2: {
				question: {type: String, default: UserProfileQuestions[1]},
				answer: String
			},
			question3: {
				question: {type: String, default: UserProfileQuestions[2]},
				answer: String
			},
		}
},
	{ timestamps: { createdAt: 'dateCreated', updatedAt: 'dateUpdated' } }
);

userSchema.index({location: '2dsphere'}, {required: false, unique: false});



userSchema.pre('save', function(next){
	next();
});

/* Methods */

userSchema.methods.jsonObject = function(){
	var profile = this.userProfile();

	var obj = {
		"firstName" : this.firstName,
		"lastName" : this.lastName,
		"gender" : this.gender,
		"email" : this.email,
		"age" : this.age,
		"birthday" : this.birthday,
		"userId" : this.userId,
		"finishedSignUp" : this.finishedSignUp,
		"interestedInString" : this.interestedInString,
		"profilePictureUrl" : this.profilePictureUrl,
		"facebookUserId" : this.facebookUserId,
		"verified" : this.verified,
		"soireeScore" : this.soireeScore,
		"pendingVerification" : this.pendingVerification,
		"creditCardLast4Digits" : this.creditCardLast4Digits,
		"chargeable" : this.chargeable,
		"hasDeviceToken" : this.deviceToken ? true : false,
		"numUnseenNotifications" : this.numUnseenNotifications,
		"userProfile" : profile ? profile : {},
		"possibleProfileQuestions" : UserProfileQuestions
	};

	//if (this.populated("_notifications")){
	//	var notifications = Notification.jsonArrayFromArray(this._notifications);
	//	obj.notifications = notifications;
	//	console.log(notifications);
	//}
	if (this.populated("_currentReservations")){
		var reservations = [];
		for (var i = 0 ; i < this._currentReservations.length; i++){
			reservations.push(this._currentReservations[i].jsonObject());
		}
		obj["pendingReservations"] = reservations;
	}

	return obj;
};

userSchema.methods.userProfile = function(){

	var obj = {
		"firstName" : this.firstName,
		"lastName" : this.lastName,
		"gender" : this.gender,
		"age" : this.age,
		"userId" : this.userId,
		"interestedInString" : this.interestedInString,
		"profilePictureUrl" : this.profilePictureUrl,
		"verified" : this.verified,
		"soireeScore" : this.soireeScore,
		"pendingVerification" : this.pendingVerification,
		"question1" : {question :this.profile.question1.question, answer:this.profile.question1.answer},
		"question2" : {question :this.profile.question2.question, answer:this.profile.question2.answer},
		"question3" : {question :this.profile.question3.question, answer:this.profile.question3.answer},
		"description" : this.profile.description
	};

	return obj;
};

userSchema.methods.verifyCode = function(code){
	return this.verificationCode == code && !this.verified;
};

userSchema.methods.findSoireesAttendingAndAttended = function(successCallback, errorCallback){
	this.deepPopulate("_currentReservations._soiree _pastReservations._soiree _currentReservations._business.businessName", function(err, _user){
		if (err){
			console.log(err);
			errorCallback(ErrorCodes.ErrorPopulating);
		}
		else{
			var soireesAttending = [], soireesAttended = [];

			for (var i = 0; i < _user._currentReservations.length; i++){
				var reservation = _user._currentReservations[i];
				var soiree = reservation._soiree;
				soiree._reservation = reservation;

				soireesAttending.push(soiree);
			}

			for (var j = 0; j < _user._pastReservations.length; j++){
				var soiree = _user._pastReservations[j]._soiree;
				soireesAttended.push(soiree);
			}

			successCallback(soireesAttending, soireesAttended);
		}
	});
};

userSchema.methods.notifyOfSoireeCancellation = function(soiree) {
	console.log("notifying user " + this.fullName + " of soiree " + soiree.soireeId + " cancellation...");

	Notification.createSoireeCancelledNotification(soiree, this);
};

userSchema.methods.notifyOfVerification = function(reason) {
	console.log("notifying user " + this.fullName + " of verification status " + this.verified);
	if (this.verified){
		Notification.createUserVerifiedNotification(this);
	}
	else{
		Notification.createUserRejectedNotification(this, reason);
	}

};

userSchema.statics.addNotificationToUserWithId = function(_id, notification) {

	var notificationId = notification._id ? notification._id : notification;

	var updateQuery = {$addToSet : {_notifications : notificationId, _unseenNotifications : notificationId} };

	this.findOneAndUpdate({_id : _id}, updateQuery, {new : true}, function(err, user){
		if (err){
			console.log(err);
		}
		PushNotificationHelper.sendNotification(user, notification);
	});

	//ArrayHelper.pushOnlyOncePopulated(this, "_notifications", notification);
	//ArrayHelper.pushOnlyOncePopulated(this, "_unseenNotifications", notification);

	//this.save(Globals.saveErrorCallback);

};

userSchema.statics.chargedUnchargedReservationForId = function(_id, reservation) {
	//_id = _id._id ? _id._id : _id; //chance that object passed in is actually populated doc. if so get its _id
};

userSchema.statics.failedToChargeUnchargedReservationForId = function(_id, reservation) {
	_id = _id._id ? _id._id : _id; //chance that object passed in is actually populated doc. if so get its _id
	var updateQuery = {$pull : {_currentReservations : reservation._id} };

	this.findOneAndUpdate({_id : _id}, updateQuery, {new : true}).exec(function(err, user){
		if (err){
			console.log(err);
		}
		else{
			var message = "Your card was declined when we tried to charge it for your soirÃ©e reservation, so we had to cancel your reservation :( Update your card and rejoin to reclaim it!"
			Notification.createNotificationWithMessage(message, user);
		}

	});
};

userSchema.statics.addNewReservationForId = function(_id, reservation){
	_id = _id._id ? _id._id : _id; //chance that object passed in is actually populated doc. if so get its _id
	var updateQuery = {$addToSet : {_currentReservations : reservation._id} };

	return this.findOneAndUpdate({_id : _id}, updateQuery, {new : true}).exec();
}

//userSchema.methods.addNewReservation = function(reservation){
//	ArrayHelper.pushOnlyOncePopulated(this, "_currentReservations", reservation);
//	return this.save();
//}

userSchema.methods.generateVerificationCode = function(){
	this.verificationCode = generateVerificationCode();
	this.save();
};

function generateVerificationCode(){
	return IDGeneratorHelper.generateId(6);
}

userSchema.methods.endedSoiree = function(soiree){
	console.log("in user.endedSoiree()");

	this.deepPopulate("_currentReservations._soiree _currentReservations._business", function(err, _user){
		if (err) return console.log(err);
		for (var i = 0; i < _user._currentReservations.length; i++){
			var reservation = _user._currentReservations[i];
			//console.log("Comparing " + reservation._soiree.id + " with " + soiree.id);

			if (reservation._soiree._id.equals(soiree._id)){
				//console.log("Match. Removing from current reservations and adding to past...");
				_user._currentReservations.splice(i, 1);
				ArrayHelper.pushOnlyOnce(_user._pastReservations, reservation._id);
				//console.log("Final result: " + _user);
				_user.updateSoireeScore(ScoreGainPerSoiree);
			};
		}
	});
};

userSchema.methods.cancelledSoiree = function(soiree){
	console.log("in user.cancelledSoiree()");

	this.deepPopulate("_currentReservations._soiree _currentReservations._business", function(err, _user){
		if (err) return console.log(err);
		for (var i = 0; i < _user._currentReservations.length; i++){
			var reservation = _user._currentReservations[i];
			//console.log("Comparing " + reservation._soiree.id + " with " + soiree.id);

			if (reservation._soiree._id.equals(soiree._id)){
				//console.log("Match. Removing from current reservations and adding to past...");
				_user._currentReservations.splice(i, 1);
				ArrayHelper.pushOnlyOnce(_user._pastReservations, reservation._id);

				//console.log("Final result: " + _user._currentReservations);
				_user.save(Globals.saveErrorCallback);
			};
		}
	});
};








/* Finding Users */

userSchema.methods.validatePassword = function(password, callback){
	bcrypt.compare(password, this.password, callback);
};


userSchema.statics.findTestUsers = function(successCallback, errorCallback){
	//if (process.env.LOCAL){
	//	this.find({testUser : true}).deepPopulate("_currentReservations _pastReservations _notifications").exec(function(err, users){
	this.find({}).deepPopulate("_currentReservations _pastReservations _notifications").sort('-dateUpdated').exec(function(err, users){
		if (err)
			errorCallback(err);
		else successCallback(users);
	});
	//return;
	//}
};

userSchema.statics.findTestUser = function(successCallback, errorCallback){
	this.find({testUser : true}).limit(1).exec(function(err, users){
		if (err || users.length == 0){
			if (errorCallback)
				errorCallback(err);
		}
		else{
			if (successCallback)
				successCallback(users[0]);
		}
	});
};

userSchema.statics.findOrCreateTestUser = function(successCallback, errorCallback){
	var User = this;

	this.findOne({firstName : 'Test', lastName : 'User', testUser : true}).exec(function(err, user){
		if (err || !user){

			console.log("test user not found. creating...");

			var newUser = new User({
				firstName: 'Test',
				lastName : 'User',
				gender : 'male',
				testUser : true,
				verified : true,
				email : 'a@experiencesoiree.com',
				location : LocationHelper.createPoint({longitude : 74.0059, latitude: 40.7128}),
			});
			newUser.save(function(err, _user){
				if (err){
					console.log(err);
					errorCallback();
				}
				else{
					newUser.generateNewSoireeAccessToken(function(encodedToken){
						successCallback(_user, encodedToken);
					}, function(err){
						errorCallback(err);
					}, {dontSave : true});
				}
			});



		}
		else successCallback(user, encodeAccessToken(user.soireeAccessToken));
	});
};




userSchema.statics.findOrCreate = function(req, successCallback, errorCallback){
	var User = this;

	var facebookUserId = req.body.facebookUserId;

	var criteria = {"facebookUserId" : facebookUserId};

	//TODO: add user/pw options

	this.findOne(criteria).exec(function(err, user){
		if (err){
			errorCallback(err);
		}
		else{
			if (!user){
				User.createUser(req, successCallback, errorCallback);
			}
			else{
				successCallback(user);
			}
		}
	});
};


userSchema.statics.findByFacebookUserId = function(facebookUserId, successCallback, errorCallback){
	console.log("Finding user with fb id: " + facebookUserId);

	this.findOne({facebookUserId : facebookUserId}).exec(function(err, user){
		if (err){
			console.log(err);
			errorCallback(ErrorCodes.ErrorQuerying);
		}
		else{
			successCallback(user);
		}
	});
};

userSchema.statics.findByUserId = function(userId, successCallback, errorCallback){

	this.findOne({userId : userId}).exec(function(err, user){
		if (err || !user){
			errorCallback(ErrorCodes.ErrorQuerying);
		}
		else{
			successCallback(user);
		}
	});
};









/**** Create New User ****/

userSchema.statics.createUserWithFacebook = function(req, successCallback, errorCallback){
	console.log("Creating user facebook with data ...." + req.body);
	var facebookUserId = req.body.facebookUserId;
	var firstName = req.body.firstName;
	var lastName = req.body.lastName;
	//var email = req.body.email;
	var gender = req.body.gender;
	if (gender) gender = gender.toLowerCase();
	var birthday = req.body.birthday;

	var profilePictureUrl = req.body.profilePictureUrl;

	var latitude = req.body.latitude ? req.body.latitude : 1;
	var longitude = req.body.longitude ? req.body.longitude : 1;
	var coors = LocationHelper.createPoint({longitude : longitude, latitude: latitude});

	var interestedIn = req.body.interestedIn;

	if (interestedIn && Array.isArray(interestedIn)){
		interestedIn = interestedIn.map(function(gender){
			return gender.toLowerCase();
		});
	}
	else if (typeof interestedIn === 'string'){
		interestedIn = [interestedIn.toLowerCase()];
	}

	if (Date.now() - new Date(birthday).getTime() < 18 * 365 * 24 * 60 * 60 * 1000){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: You must be at least 18 years old to sign up for " + Globals.SOIREE);
	}


	var newUser = new this({
		facebookUserId : facebookUserId,
		firstName : firstName,
		lastName : lastName,
		//email : email,
		gender : gender,
		interestedIn : interestedIn,
		birthday : birthday,
		profilePictureUrl : profilePictureUrl,
		location : coors,
		verified: false,
		soireeScore: 200,
		provider : "facebook"
	});

	newUser.save(function(err, user){
		if (err || !user) {
			console.log("Error creating user: " + err);
			errorCallback(ErrorCodes.ErrorSaving);
		}
		else {
			user.generateNewSoireeAccessToken(function(encodedAccessToken) {
				successCallback(user, encodedAccessToken);
			},  function(){
				return errorCallback(ErrorCodes.Error);
			});
		}
	});
};

userSchema.statics.createUserWithPassword = function(req, successCallback, errorCallback){
	console.log("Creating user email pw....");

	var User = this;
	var emailSignupData = req.body.emailSignupData;
	if (!emailSignupData) return errorCallback(ErrorCodes.MissingData);

	var password = emailSignupData.password ? emailSignupData.password.trim() : "";
	var interestedIn = emailSignupData.interestedIn;
	var firstName = emailSignupData.firstName ? emailSignupData.firstName.trim() : "";
	var lastName = emailSignupData.lastName ? emailSignupData.lastName.trim() : "";
	var email = emailSignupData.email ? emailSignupData.email.trim().toLowerCase() : "";
	var gender = emailSignupData.gender ? emailSignupData.gender.trim().toLowerCase() : "";
	var birthday = emailSignupData.birthday ? emailSignupData.birthday.trim() : "";
	var birthdayDate = emailSignupData.birthdayDate;
	var profilePictureUrl;


	if (!firstName){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: No first name specified");
	}
	if (!lastName){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: No last name specified");
	}
	if (!email || !EmailHelper.validateEmail(email)){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: Invalid Email");
	}
	if (!gender || Globals.genders.indexOf(gender) === -1){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: Invalid gender specified");
	}
	if (!password){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: No password specified");
	}
	if (password.length < 6) {
		return errorCallback(ErrorCodes.MissingData, "Error signing up: Password must be at least 6 characters long");
	}
	if (!interestedIn){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: You didn't tell us what gender you were interested in");
	}
	var invalidPasswordChars = [' '];
	for (var i = 0; i < invalidPasswordChars.length; i++){
		if(password.indexOf(invalidPasswordChars[i]) !== -1) {
			return errorCallback(ErrorCodes.MissingData, "Error signing up: Password cannot contain spaces");
		}
	}
	if (Date.now() - birthdayDate*1000 < 18 * 365 * 24 * 60 * 60 * 1000){
		return errorCallback(ErrorCodes.MissingData, "Error signing up: You must be at least 18 years old to sign up for " + Globals.SOIREE);
	}
	interestedIn = interestedIn.map(function(gender){
		return gender.toLowerCase();
	});

	//create salt
	bcrypt.genSalt(Globals.SALT_LENGTH, function(err, salt) {
		if (err) {
			console.log("Error creating salt - User.createUserWithPassword()");
			return errorCallback(ErrorCodes.Error);
		}

		//use salt to hash password
		bcrypt.hash(password, salt, function (err, hashedPassword) {
			if (err) {
				console.log("Error generating password hash - User.createUserWithPassword()");
				return errorCallback(ErrorCodes.Error);
			}


			var latitude = req.body.latitude ? req.body.latitude : 1;
			var longitude = req.body.longitude ? req.body.longitude : 1;
			var coors = LocationHelper.createPoint({longitude : longitude, latitude: latitude});

			var newUser = new User({
				firstName : firstName,
				lastName : lastName,
				email : email,
				gender : gender,
				interestedIn : interestedIn,
				profilePictureUrl : profilePictureUrl,
				birthday : birthday,
				verified: false,
				soireeScore: 200,
				provider : "userpw",
				password : hashedPassword,
				location : coors
			});


			newUser.save(function(err, user){
				if (err || !user) {
					console.log("Error creating user: " + err);
					var errorMessages = ErrorHelper.errorMessagesFromError(err);
					errorCallback(ErrorCodes.ErrorSaving, errorMessages);
				}
				else {
					console.log("newUser: " + user);

					user.generateNewSoireeAccessToken(function(encodedAccessToken){

						console.log("user from save callback: " + user);
						successCallback(user, encodedAccessToken);

					}, function(){
						return errorCallback(ErrorCodes.Error);
					}, {dontSave : true});


				}
			});

			//generates new access token and saves it to user, then returns an encoded version


		});
	});


};






/**** Access Token ****/



userSchema.methods.generateNewSoireeAccessToken = function(successCallback, errorCallback, options){
	var user = this;
	options = options ? options : {};


	//IDGeneratorHelper.generateUniqueId("User", "soireeAccessToken", user, function(){

		jwt.sign({userId :user.userId}, jwtUserSecret, {}, function(err, encodedAccessToken){
			if (err) console.log(err);
			if (!encodedAccessToken || err) {
				if (!errorCallback) return;
				return errorCallback();
			}

			console.log("generated new encoded access token : " + encodedAccessToken);

			//user.soireeAccessToken = accessToken;

			if (options.dontSave) {
				return successCallback(encodedAccessToken);
			}

			user.save(function(err2){
				if (err2){
					console.log(err2);
					if (!errorCallback) return; return errorCallback();
				}
				successCallback(encodedAccessToken);
			});
		});



	//}, {length : Globals.ACCESS_TOKEN_LENGTH, addLowercase : true});

	//var accessToken = IDGeneratorHelper.generateId(Globals.ACCESS_TOKEN_LENGTH, {onlyLowercase:true});


};








/**** Verify User ****/

userSchema.statics.login = function(req, res, next, successCallback, errorCallback){
	var User = this;

	passport.authenticate('user-pw', function(err, user, info){
		if (err){
			console.log(err);
			errorCallback(err, null);
		}
		else if (!user){
			errorCallback(ErrorCodes.InvalidInput, info.message);
		}
		else{
			user.generateNewSoireeAccessToken(function(encodedAccessToken){
				successCallback(user, encodedAccessToken);
			}, function(){
				errorCallback(ErrorCodes.Error, null);
			});
		}
	})(req, res, next);

};

userSchema.statics.findUserByEncodedSoireeAccessToken = function(username, encodedAccessToken, done){
	var User = this;

	console.log('decoding ' + encodedAccessToken);

	jwt.verify(encodedAccessToken, jwtUserSecret, {}, function(err, decoded){
		if (err){
			console.log(err);
			return done(err, false);
		}


		if (!decoded) return done(null, false);

		var userId = decoded.userId;
		if (!userId){
			return done(null, false);
		}
		if (!username){
			console.log("WARNING: username not defined while trying to authenticate user with soiree access token");
		}

		User.findOne({userId : userId}).exec(function(err, user){
			if (err){
				console.log(err);
				done(err, false);
			}
			else{
				if (user && (user.email === username || user.facebookUserId === username)){
					return done(null, user);
				}
				else return done(new Error(ErrorCodes.UserAuthenticationError), null);
			}
		});
	});
};


userSchema.statics.authenticateUser = function(req, res, next, successCallback, failureCallback){
	if (!failureCallback){
		failureCallback = function(err){
			if (!err) err = ErrorCodes.UserAuthenticationError;
			ResHelper.sendError(res, err);
		};
	}

	var user = req.body.user ? req.body.user : req.body;


	if (!user){
		console.log("No user passed to authenticateUser");
		return failureCallback(ErrorCodes.UserAuthenticationError);
	}

	var latitude = user.latitude;
	var longitude = user.longitude;
	var location;
	if (latitude && longitude) {
		location = LocationHelper.createPoint({longitude: longitude, latitude: latitude});
	}

	if (user.soiree_access_token) {
		req.body.soiree_access_token = user.soiree_access_token.trim();
		if (!req.body.username && user.username) {
			req.body.username = user.username.trim();
		}
		passport.authenticate('soiree-access-token', function(err, userFound, info){
			if (err){
				console.log("Error fetching user " + err);
				failureCallback(ErrorCodes.UserAuthenticationError);
			}
			else if (!userFound) {
				console.log("User not found soiree access token");
				failureCallback(ErrorCodes.UserAuthenticationError);
			}
			else {
				console.log("User found " + userFound.userId);
				successCallback(userFound);
			}
		})(req, res, next);

	}
	else {
		failureCallback(ErrorCodes.UserAuthenticationError);
	}
};

userSchema.methods.updateSoireeScore = function(addition){
	this.soireeScore += addition;
	var user = this;

	this.save(function(err){
		if (err){
			console.log(err);
		}
		else{
			PushNotificationHelper.sendSoireeScoreNotification(user);
		}
	});
}

/* Virtuals */

userSchema.virtual('age').get(function(){
	var birthdate = new Date(this.birthday);
	var age = (Date.now() - birthdate) / (1000 * 60 * 60 * 24 * 365.25);
	return parseInt(age);
});

userSchema.virtual('hasStripeCustomerId').get(function(){
	console.log("stripeCustomerId : "+ this.stripeCustomerId);
	return this.stripeCustomerId ? true : false;
});

userSchema.virtual('currentDeviceUUID').get(function() {
	if (this.associatedDeviceUUIDs.length <= 0)
		return "";
	return this.associatedDeviceUUIDs[this.associatedDeviceUUIDs.length-1];
});

userSchema.virtual('fullName').get(function(){
	if (!this.lastName)
		return this.firstName;
	else if (!this.firstName)
		return this.lastName;

	return this.firstName + " " + this.lastName;
});

userSchema.virtual('isMale').get(function(){
	return this.gender === 'male';
});

userSchema.virtual('numUnseenNotifications').get(function() {

	return this._unseenNotifications.length;
});

userSchema.virtual('isFemale').get(function(){
	return this.gender === 'female';
});

userSchema.virtual('interestedInString').get(function(){

	if(this.interestedIn){
		if (this.interestedIn.indexOf('male') !== -1){
			if (this.interestedIn.indexOf('female') !== -1){
				return "Men and Women";
			}
			else return "Men";
		}
		else if (this.interestedIn.indexOf('female') !== -1){
			return "Women";
		}
	}
	return "Nobody";
});


userSchema.pre("validate", function(next) {
	if (!this.userId){
		IDGeneratorHelper.generateUniqueId("User", "userId", this, next, {length : 15, addLowerCase : true});
	}
	else next();
});


userSchema.pre("save", function(next) {
	//if (this.isNew && Array.isArray(this.location) && 0 === this.location.length) {
	//	this.location = undefined;
	//}
	if (this.testUser && !Globals.devOrTest){
		return next("Error");
	}
	if (!this.verified && !this.verificationCode) {
		this.verificationCode = generateVerificationCode();
	}
	next();
});

userSchema.pre("remove", function(next){
	console.log("preremove called with " + this);

	mongoose.model("CommunityPost").find({_user : this._id}, function(err, posts){
		if (err) console.log(err);
		else{
			posts.forEach(function(post){
				post.remove();
			});
		}
	});
	mongoose.model("CommunityComment").find({_user : this._id}, function(err, comments){
		if (err) console.log(err);
		else{
			comments.forEach(function(comment){
				comment.remove();
			});
		}
	});
	mongoose.model("Notification").find({_user : this._id}, function(err, notifications){
		if (err) console.log(err);
		else{
			notifications.forEach(function(notification){
				notification.remove();
			});
		}
	});

	mongoose.model("UserVerification").update({_user : this._id}, { $set : {handled : true} }, function(err){
		if (err) console.log(err);
	});

	next();


});

var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
userSchema.plugin(deepPopulate, options);
userSchema.plugin(uniqueValidator, {message: '{PATH} already taken. Please try again.' });

module.exports = mongoose.model('User', userSchema);


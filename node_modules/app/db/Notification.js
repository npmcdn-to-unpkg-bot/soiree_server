/**
 * Created by shadygabal on 1/18/16.
 */
var mongoose = require('./mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;

/* Other Models */
var User = require('app/db/User.js');

/* Packages */
var shortid = require('shortid');

/* Helper */
var helpersFolderLocation = "../helpers/";
var DateHelper = require('app/helpers/DateHelper.js');
var ResHelper = require('app/helpers/ResHelper.js');
var CreditCardHelper = require('app/helpers/CreditCardHelper.js');
var LocationHelper = require('app/helpers/LocationHelper.js');
var PushNotificationHelper = require('app/helpers/PushNotificationHelper.js');
var MongooseHelper = require('app/helpers/MongooseHelper.js');
var Globals = require('app/helpers/Globals.js');
var IDGeneratorHelper = require('app/helpers/IDGeneratorHelper.js');

var notificationTypes = ["commented", "liked", "soireeCancelled", "soireeReminder", "soireeStarting", "soireeConfirmed", "soireeFeedback", "userAccepted", "userRejected", "test"];

var notificationTypesObj = {
    "commented" : "commented",
    "liked" : "liked",
    "soireeReminder" : "soireeReminder",
    "soireeStarting" : "soireeStarting",
    "soireeCancelled" : "soireeCancelled",
    "soireeConfirmed" : "soireeConfirmed",
    "soireeFeedback" : "soireeFeedback",
    "userAccepted" : "userAccepted",
    "userRejected" : "userRejected",
    "test" : "test",
    "message" : "message"
};

var notificationSchema = new Schema({
    seen: {type: Boolean, default: false},
    tapped: {type: Boolean, default: false},
    users: [{user : String, firstName: String, lastName: String}],
    title : String,
    bodySuffix : {type: String, required: true},
    postId : {type: String},
    soireeId : {type: String},
    imageUrl : {type: String},
    notificationType : {type: String, enum: notificationTypes, required: true},
    _user : {type: ObjectId, ref: "User", index: true},
    _id : {type: String, index: true, unique: true, required: true},
    date : {type: Date, default: new Date()}
});

notificationSchema.statics.notificationTypes = notificationTypesObj;

//for creating notifications when user comments on a post

notificationSchema.methods.jsonObject = function(){
    var obj = {
        "seen" : this.seen,
        "body" : this.body,
        "notificationType" : this.notificationType,
        "notificationTitle" : this.notificationTitle,
        "notificationId" : this._id,
        "date" : this.date.getTime() / 1000,
        "tapped" : this.tapped
    };

    if (this.postId){
        obj.postId = this.postId;
    }
    if (this.soireeId){
        obj.soireeId = this.soireeId;
    }
    //if (this.lastUserCommentedName){
    //    obj.lastUserCommentedName = this.lastUserCommentedName;
    //}
    if (this.imageUrl){
        obj.imageUrl = this.imageUrl;
    }

    return obj;
};

notificationSchema.statics.createCommentedOnPostNotifications = function(userThatCommented, upPost, upComment){//up = un populated
    var Notification = this;

    //first make sure you have populated all required fields for both the post and the comment
    upPost.deepPopulate("_user _comments._user", function(err2, post){
        if (err2 || !post){ return console.log("Error fetching post: " + err2); }

        upComment.deepPopulate("_user", function(err3, comment){
            if (err3 || !comment){ return console.log("Error fetching comment: " + err3); }

            //if person that commented is NOT the post author, send a notification to the post author
            if (!MongooseHelper.equalsPopulated(userThatCommented, post._user)) {
                var body = ' commented on your post "' + post.text + '"';
                Notification.pushCommunityNotification(body, post._user, comment._user, post, Notification.notificationTypes.commented);
            }

            //go through comments, pick out all unique users and notify them
            //TODO: OPTIMIZE

            var commentUsersNotified = [];
            for (var i = 0; i < post._comments.length; i++){

                var postComment = post._comments[i];
                var commentUser = postComment._user;
                //if havent notified user before


                if (commentUsersNotified.indexOf(commentUser._id) === -1 && !MongooseHelper.equalsPopulated(commentUser, userThatCommented) && !MongooseHelper.equalsPopulated(commentUser, post._user)){
                    var bodySuffix = " commented on a post you commented on \"" + post.text + "\"";

                    Notification.pushCommunityNotification(bodySuffix, commentUser, userThatCommented, post, Notification.notificationTypes.commented);
                    commentUsersNotified.push(commentUser._id);
                }
            }

        });
    });
    //});
};


//if notification already exists, modify it to add this on. if not, create one. then push
notificationSchema.statics.pushCommunityNotification = function(bodySuffix, notificationsUser, causingUser,  post, type){

    var Notification = this;
    //console.log("pushCommunityNotification() with notifications user: " + notificationsUser.fullName);

    var idToMatch = generateId(notificationsUser, post.postId, type);
    var index = notificationsUser._notifications.indexOf(idToMatch);

    if (index != -1){
        var notificationId = notificationsUser._notifications[index];

        Notification.findOne({_id : notificationId}).exec(function(err, notification){
            if (err){
                console.log("pushCommunityNotification() error fetching notification with id: " + notificationId);
            }
            else if (!notification){
                console.log("pushCommunityNotification() no notification found with id: " + notificationId);
                Notification.createCommunityNotification(bodySuffix, notificationsUser, causingUser, post, type);
            }
            else{
                var newUser = {user : causingUser.id, firstName: causingUser.firstName, lastName: causingUser.lastName};

                var filterOutExistingUser = function (userObj){
                    return userObj.user !== newUser.user;
                };

                notification.users = notification.users.filter(filterOutExistingUser);
                notification.users.push(newUser);
                notification.title = causingUser.fullName;
                notification.imageUrl = causingUser.profilePictureUrl;
                notification.seen = false;
                notification.date = new Date();
                notification.save(Globals.saveErrorCallback);
                //save and push notification to user
                var User = mongoose.model("User");
                User.addNotificationToUserWithId(notificationsUser._id, notification);

            }
        });
    }
    else{
       console.log("addToNotification(): idToMatch " + idToMatch + " was not found in notificationsUser._notifications: " + notificationsUser._notifications + ". Creating...");
        Notification.createCommunityNotification(bodySuffix, notificationsUser, causingUser, post, type);
    }

};

notificationSchema.statics.createCommunityNotification = function(bodySuffix, notificationsUser, causingUser, post, type){
    var Notification = this;

    var firstUser = {user: causingUser.id, firstName: causingUser.firstName, lastName: causingUser.lastName};
    var fullName = causingUser.fullName;

    var newNotification = new Notification({
        bodySuffix : bodySuffix,
        _user : notificationsUser._id,
        postId : post.postId,
        imageUrl : causingUser.profilePictureUrl,
        notificationType : type,
        _id : generateId(notificationsUser, post.postId, type),
        users: [firstUser],
        title : fullName
    });

    newNotification.save(function(err, notif){
        if (err){
            console.log(err);
        }
        else{
            var User = mongoose.model("User");
            User.addNotificationToUserWithId(notificationsUser._id, notif);
        }
    });
};

notificationSchema.statics.createUserVerifiedNotification = function(user){
    if (!user){
        console.log("null user passed to createUserVerifiedNotification()");
        return;
    }
    var Notification = this;
    var message = "Congratulations! You've been accepted as a member of " + Globals.SOIREE + "! You can now join " + Globals.SOIREE_LOWERCASE + "s and post in community!";

    var newNotification = new Notification({
       bodySuffix: message,
        _user : user._id,
        notificationType : Notification.notificationTypes.userAccepted,
        _id : generateId(user, "" + Date.now(), Notification.notificationTypes.userAccepted),
        title: "Verification accepted!",
        date : new Date()
    });

    newNotification.save(function(err, notif){
        if (err){
            console.log(err);
        }
        else{
            var User = mongoose.model("User");

            User.addNotificationToUserWithId(user._id, notif);
        }

    });
};

notificationSchema.statics.createUserRejectedNotification = function(user, reason){
    if (!user){
        console.log("null user passed to createUserVerifiedNotification()");
        return;
    }
    if (!reason){
        console.log("null reason passed to createUserVerifiedNotification()");
        reason = "the images were unreadable / the face or name were blocked out.";
    }
    else{
        reason = reason.toLowerCase();
    }

    var Notification = this;
    var message = "There was a problem with your user verification. It was rejected because " + reason;

    var newNotification = new Notification({
        bodySuffix: message,
        _user : user._id,
        notificationType : Notification.notificationTypes.userAccepted,
        _id : generateId(user, "" + Date.now(), Notification.notificationTypes.userRejected),
        title: "Verification rejected :(",
        date : new Date()
    });

    newNotification.save(function(err, notif){
        if (err){
            console.log(err);
        }
        else{
            var User = mongoose.model("User");
            console.log("Created Notification: " + newNotification.body + " for: " + user.firstName);
            //user.addNotification(notif);
            User.addNotificationToUserWithId(user._id, notif);

        }

    });
};

notificationSchema.statics.jsonArrayFromArray = function(_notifications) {
    var notifications = [];
    for (var i = 0; i < _notifications.length; i++){
        var notification = _notifications[i];
        notifications.push(notification.jsonObject());
    }
    return notifications;
};

notificationSchema.statics.createSoireeCancelledNotification = function(soiree, notificationsUser){
    var Notification = this;

    var message = "Your " + soiree.soireeType + " " + Globals.SOIREE_LOWERCASE + " didn't have enough people, so we had to cancel it. Don't worry, you weren't charged for it.";

    var newNotification = new Notification({
        bodySuffix : message,
        _user : notificationsUser._id,
        notificationType : Notification.notificationTypes.soireeCancelled,
        _id : generateId(notificationsUser, soiree.soireeId, Notification.notificationTypes.soireeCancelled),
        title : 'Cancelled ' + Globals.SOIREE_LOWERCASE,
        soireeId : soiree.soireeId,
        date : new Date()
    });

    newNotification.save(Globals.saveErrorCallback);

    var User = mongoose.model("User");
    User.addNotificationToUserWithId(notificationsUser._id, newNotification);

    return newNotification;

};

notificationSchema.statics.createSoireeConfirmedNotification = function(soiree, notificationsUser){
    var Notification = this;

    var message = "Enough people have joined your " + soiree.soireeType + " " + Globals.SOIREE_LOWERCASE + ", so it's officially on! See you there.";

    var newNotification = new Notification({
        bodySuffix : message,
        _user : notificationsUser._id,
        notificationType : Notification.notificationTypes.soireeConfirmed,
        _id : generateId(notificationsUser, soiree.soireeId, Notification.notificationTypes.soireeCancelled),
        title : 'Confirmed ' + Globals.SOIREE_LOWERCASE,
        soireeId : soiree.soireeId,
        date : new Date()
    });

    newNotification.save(Globals.saveErrorCallback);
    var User = mongoose.model("User");
    User.addNotificationToUserWithId(notificationsUser._id, newNotification);

    console.log("Created Notification: " + newNotification.body + " for: " + notificationsUser.firstName);
    return newNotification;

};


notificationSchema.statics.createSoireeFeedbackNotification = function(soiree, notificationsUser){
    var Notification = this;

    var message = "How was your " + Globals.SOIREE_LOWERCASE + "? Your feedback is valuable to us.";

    var newNotification = new Notification({
        bodySuffix : message,
        _user : notificationsUser._id,
        notificationType : Notification.notificationTypes.soireeFeedback,
        _id : generateId(notificationsUser, soiree.soireeId, Notification.notificationTypes.soireeFeedback),
        title : Globals.SOIREE_LOWERCASE + ' Feedback',
        soireeId : soiree.soireeId,
        date : new Date()
    });

    newNotification.save(Globals.saveErrorCallback);
    var User = mongoose.model("User");
    User.addNotificationToUserWithId(notificationsUser._id, newNotification);

    console.log("Created Notification: " + newNotification.body + " for: " + notificationsUser.firstName);
    return newNotification;

};


notificationSchema.statics.createSoireeReminderNotification = function(soiree, notificationsUser, mins) {
    var Notification = this;

    var message = "Hey boo. Don't forget that your " + soiree.soireeType + " " + Globals.SOIREE_LOWERCASE + " will start in " + mins + " minutes. See you there. xoxo";

    var newNotification = new Notification({
        bodySuffix : message,
        _user : notificationsUser._id,
        notificationType : Notification.notificationTypes.soireeReminder,
        _id : generateId(notificationsUser, soiree.soireeId, Notification.notificationTypes.soireeReminder),
        title : Globals.SOIREE + " reminder",
        soireeId : soiree.soireeId,
        date : new Date()
    });

    newNotification.save(function(err){
       if (err){
           console.log(err);
       }
        else{
           var User = mongoose.model("User");
           User.addNotificationToUserWithId(notificationsUser._id, newNotification);

           console.log("Created Notification: " + newNotification.body + " for: " + notificationsUser.firstName);
       }
    });
};

notificationSchema.statics.createSoireeStartingNotification = function(soiree, notificationsUser) {
    var Notification = this;

    var message = "Your " + soiree.soireeType + " " + Globals.SOIREE_LOWERCASE + " is starting!";

    var newNotification = new Notification({
        bodySuffix : message,
        _user : notificationsUser._id,
        notificationType : Notification.notificationTypes.soireeStarting,
        _id : generateId(notificationsUser, soiree.soireeId, Notification.notificationTypes.soireeStarting),
        title : Globals.SOIREE + " starting",
        soireeId : soiree.soireeId,
        date : new Date()
    });

    newNotification.save(function(err){
        if (err){
            console.log(err);
        }
        else{
            var User = mongoose.model("User");
            User.addNotificationToUserWithId(notificationsUser._id, newNotification);

            console.log("Created Notification: " + newNotification.body + " for: " + notificationsUser.firstName);
        }
    });
};



// notificationSchema.statics.createSoireeConfirmedNotification = function(soiree, notificationsUser){
//     var Notification = this;
//
//     var message = "Enough people have joined your " + soiree.soireeType + " " + Globals.SOIREE_LOWERCASE + ", so it's officially on! See you there.";
//
//     var newNotification = new Notification({
//         bodySuffix : message,
//         _user : notificationsUser._id,
//         notificationType : Notification.notificationTypes.soireeConfirmed,
//         _id : generateId(notificationsUser, soiree.soireeId, Notification.notificationTypes.soireeCancelled),
//         title : 'Confirmed ' + Globals.SOIREE_LOWERCASE,
//         soireeId : soiree.soireeId,
//         date : new Date()
//     });
//
//     var User = mongoose.model("User");
//
//     newNotification.save(Globals.saveErrorCallback);
//     User.addNotificationToUserWithId(notificationsUser._id, newNotification);
//
//     console.log("Created Notification: " + newNotification.body + " for: " + notificationsUser.firstName);
//     return newNotification;
//
// };

notificationSchema.statics.createNotificationWithMessage = function(message, notificationsUser){
    var Notification = this;


    var newNotification = new Notification({
        bodySuffix : message,
        _user : notificationsUser._id,
        notificationType : Notification.notificationTypes.test,
        title : "Test notification title",
        date : new Date()
    });

    IDGeneratorHelper.generateUniqueId("Notification", "_id", newNotification, function(){

        newNotification._id = generateId(notificationsUser, newNotification._id, Notification.notificationTypes.message);
        newNotification.save(function(err, _notification){
            if (err){
                console.log(err);
            }
            else{
                var User = mongoose.model("User");
                User.addNotificationToUserWithId(notificationsUser._id, _notification);

                console.log("Created Notification: " + _notification.body + " for: " + notificationsUser.firstName);
            }
        });


    }, {length: 20, addLowercase : true});



};


notificationSchema.statics.createTestNotification = function(notificationsUser) {
    var Notification = this;

    var message = "Test notification body";
    var randId = IDGeneratorHelper.generateId(15, {addLowercase: true})

    //console.log(notificationsUser);

    var newNotification = new Notification({
        bodySuffix : message,
        _user : notificationsUser._id,
        notificationType : Notification.notificationTypes.test,
        _id : generateId(notificationsUser, randId, Notification.notificationTypes.test),
        title : "Test notification title",
        date : new Date()
    });

    newNotification.save(function(err, _notification){
        if (err){
            console.log(err);
        }
        else{
            var User = mongoose.model("User");

            //notificationsUser.addNotification(_notification);
            User.addNotificationToUserWithId(notificationsUser._id, _notification);

            console.log("Created Notification: " + _notification.body + " for: " + notificationsUser.firstName);
        }
    });
};

notificationSchema.virtual('notificationTitle').get(function () {
    if (this.notificationType === "soireeCancelled"){
        return Globals.SOIREE + " cancelled";
    }
    else return this.lastUserCommentedName;
});

notificationSchema.virtual('lastUserCommentedName').get(function () {
    if (this.users.length > 0){
        var lastUserObj = this.users[this.users.length-1];
        return lastUserObj.firstName + " " + lastUserObj.lastName;
    }
    else return "Notification";
});

notificationSchema.virtual('body').get(function () {
    if (!this.users || this.users.length === 0){
        return this.bodySuffix;
    };

    //console.log("this.users:");
    //for (var k = 0; k < this.users.length; k++){
    //    console.log(this.users[k]);
    //}

    var numNames = this.users.length;

    if (numNames == 0)
        return this.bodySuffix;

    var firstName = this.users[0].firstName;

    if (numNames === 1){
        return firstName + this.bodySuffix;
    }

    var secondName = this.users[1].firstName;

    if (numNames === 2){
        return secondName + " and " + firstName + this.bodySuffix;
    }

    numNames -= 2;
    var others = (numNames === 1 ? " other" : " others");

    firstName = this.users[this.users.length-2].firstName;
    secondName = this.users[this.users.length-1].firstName;

    return secondName + ", " + firstName + ", and " + numNames + others + this.bodySuffix;
});

function generateId(user, idSuffix, type){
//USER SHOULD ONLY EVER BE THE USER THAT IS RECEIVING THE NOTIFICATION
    var id = user.id + "_" + idSuffix + "_" + type;
    //console.log("Notification.generateId(): " + id);
    return id;
}


notificationSchema.pre('remove', function(next){
    mongoose.model("User").findOne({_user : this._user}).exec(function(err, user){
       if (err){
           console.log(err);
       }
        else if (user){
           var index = user._unseenNotifications.indexOf(this._id);
           if (index !== -1) {
               user._unseenNotifications.splice(index, 1);
           }
       }
    });
    next();
});


var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
notificationSchema.plugin(deepPopulate, options);

module.exports = mongoose.model('Notification', notificationSchema);
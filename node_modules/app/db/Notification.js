/**
 * Created by shadygabal on 1/18/16.
 */
var mongoose = require('./mongoose_connect.js');
var Schema = mongoose.Schema;
var ObjectId = Schema.Types.ObjectId;

/* Other Models */
var User = require('./User.js');

/* Packages */
var shortid = require('shortid');

/* Helper */
var helpersFolderLocation = "../helpers/";
var DateHelper = require('app/helpers/DateHelper.js');
var ResHelper = require('app/helpers/ResHelper.js');
var CreditCardHelper = require('app/helpers/CreditCardHelper.js');
var LocationHelper = require('app/helpers/LocationHelper.js');
var PushNotificationHelper = require('app/helpers/PushNotificationHelper.js');
var MongooseHelper = require('app/helpers/MongooseHelper.js');
var Globals = require('app/helpers/Globals.js');

var notificationTypes = ["commented", "liked", "soireeCancelled", "soireeReminder", "soireeStarting", "soireeConfirmed", "test"];

var notificationTypesObj = {
    "commented" : "commented",
    "liked" : "liked",
    "soireeReminder" : "soireeReminder",
    "soireeStarting" : "soireeStarting",
    "soireeCancelled" : "soireeCancelled",
    "soireeConfirmed" : "soireeConfirmed"
};

var notificationSchema = new Schema({
    notificationId: {type: String, index: true, default: shortid.generate}, /* IDs */
    read: {type: Boolean, default: false},
    users: [{user : String, firstName: String, lastName: String}],
    title : String,
    bodySuffix : {type: String, required: true},
    postId : {type: String},
    imageUrl : {type: String},
    notificationType : {type: String, enum: notificationTypes, required: true},
    _user : {type: ObjectId, ref: "User"},
    _id : {type: String}

});

notificationSchema.statics.notificationTypes = notificationTypesObj;

notificationSchema.statics.createCommentedOnPostNotifications = function(userThatCommented, upPost, upComment){//up = un populated
    var Notification = this;
    console.log("createCommentedOnPostNotification()");

    //upComment.deepPopulate("_user", function(err, comment){
    //    if (err || !comment){
    //        console.log("Error fetching comment: " + err);
    //        return;
    //    }

    upPost.deepPopulate("_user _comments._user", function(err2, post){
        if (err2 || !post){ return console.log("Error fetching post: " + err2); }

        upComment.deepPopulate("_user", function(err3, comment){
            if (err3 || !comment){ return console.log("Error fetching comment: " + err3); }

            //if (!MongooseHelper.equalsPopulated(userThatCommented, post._user)){
            var body = ' commented on your post "' + post.text + '"';
            Notification.sendCommunityNotification(body, post._user, comment._user, post, Notification.notificationTypes.commented);
            //Notification.createNotification(bodySuffix, post._user, post, "commented");
            //}

            var commentUsersNotified = [];
            for (var i = 0; i < post._comments; i++){
                var postComment = post._comments[i];
                var commentUser = postComment._user;
                if (commentUsersNotified.indexOf(commentUser._id) == -1 && !MongooseHelper.equalsPopulated(commentUser, userThatCommented) && !MongooseHelper.equalsPopulated(commentUser, post._user)){
                    //if (commentUsersNotified.indexOf(commentUser._id) == -1){
                    var bodySuffix = " commented on a post you commented on \"" + post.text + "\"";
                    Notification.sendCommunityNotification(bodySuffix, commentUser, userThatCommented, post, Notification.notificationTypes.commented);
                    commentUsersNotified.push(commentUser._id);
                }
            }

        });
    });
    //});
};

notificationSchema.statics.sendCommunityNotification = function(bodySuffix, notificationsUser, causingUser,  post, type){
    //if notification already exists, modify it to add this on. if not, create one

    console.log("sendCommunityNotification() with notifications user: " + causingUser.fullName);
    var Notification = this;

    var idToMatch = generateId(causingUser, post.postId, type);
    var index = notificationsUser._notifications.indexOf(idToMatch);
    if (index != -1){
        var notificationId = notificationsUser._notifications[index];

        Notification.findOne({_id : notificationId}).exec(function(err, notification){
            if (err){
                console.log("addToNotification() error fetching notification with id: " + notificationId);
            }
            else if (!notification){
                console.log("addToNotification() no notification found with id: " + notificationId);
                Notification.createCommunityNotification(bodySuffix, notificationsUser, causingUser, post, type);
            }
            else{
                var newUser = {user : causingUser.id, firstName: causingUser.firstName, lastName: causingUser.lastName};

                var filterOutExistingUsers = function (userObj){
                    return userObj.user !== newUser.user;
                };

                notification.users = notification.users.filter(filterOutExistingUsers);
                console.log("Filtered out notification.users to: " + notification.users);
                notification.users.push(newUser);
                notification.title = causingUser.fullName;
                notification.imageUrl = causingUser.profilePictureUrl;
                notification.read = false;
                notification.save();
                notificationsUser.addNotification(notification);
                //PushNotificationHelper.sendNotification(notificationsUser, notification);

            }
        });
    }
    else{
       console.log("addToNotification(): idToMatch " + idToMatch + " was not found in notificationsUser._notifications: " + notificationsUser._notifications + ". Creating...");
        Notification.createCommunityNotification(bodySuffix, notificationsUser, causingUser, post, type);
    }

};

notificationSchema.statics.notificationsForUser = function(user, successCallback, errorCallback) {
};

notificationSchema.statics.jsonArrayFromArray = function(_notifications) {
    var notifications = [];
    for (var i = _notifications.length-1; i >= 0; i--){
        var notification = _notifications[i];
        notifications.push(notification.jsonObject());
    }
    return notifications;
};

notificationSchema.statics.createSoireeCancelledNotification = function(soiree, notificationsUser){
    var Notification = this;

    var message = "Your " + soiree.soireeType + " " + Globals.SOIREE_LOWERCASE + " didn't have enough people, so we had to cancel it."
    "Don't worry, you weren't charged for it.";

    var newNotification = new Notification({
        bodySuffix : message,
        _user : notificationsUser._id,
        notificationType : Notification.notificationTypes.soireeCancelled,
        _id : generateId(notificationsUser, soiree.soireeId, Notification.notificationTypes.soireeCancelled),
        title : 'Cancelled ' + Globals.SOIREE_LOWERCASE
    });

    newNotification.save(Globals.saveErrorCallback);
    notificationsUser.addNotification(newNotification);

    console.log("Created Notification: " + newNotification.body + " for: " + notificationsUser.firstName);
    return newNotification;

};

notificationSchema.statics.createSoireeConfirmedNotification = function(soiree, notificationsUser){
    var Notification = this;

    var message = "Enough people have joined your " + soiree.soireeType + " " + Globals.SOIREE_LOWERCASE + ", so it's officially on! See you there."

    var newNotification = new Notification({
        bodySuffix : message,
        _user : notificationsUser._id,
        notificationType : Notification.notificationTypes.soireeConfirmed,
        _id : generateId(notificationsUser, soiree.soireeId, Notification.notificationTypes.soireeCancelled),
        title : 'Confirmed ' + Globals.SOIREE_LOWERCASE
    });

    newNotification.save(Globals.saveErrorCallback);
    notificationsUser.addNotification(newNotification);

    console.log("Created Notification: " + newNotification.body + " for: " + notificationsUser.firstName);
    return newNotification;

};

notificationSchema.statics.createSoireeReminderNotification = function(soiree, notificationsUser, mins) {
    var Notification = this;

    var message = "Hey boo. Don't forget that your " + soiree.soireeType + " " + Globals.SOIREE_LOWERCASE + " will start in " + mins + " minutes. See you there. xoxo";

    var newNotification = new Notification({
        bodySuffix : message,
        _user : notificationsUser._id,
        notificationType : Notification.notificationTypes.soireeReminder,
        _id : generateId(notificationsUser, soiree.soireeId, Notification.notificationTypes.soireeReminder),
        title : Globals.SOIREE + " reminder"
    });

    newNotification.save(function(err){
       if (err){
           console.log(err);
       }
        else{
           notificationsUser.addNotification(newNotification);
           console.log("Created Notification: " + newNotification.body + " for: " + notificationsUser.firstName);
       }
    });
};

notificationSchema.statics.createSoireeStartingNotification = function(soiree, notificationsUser) {
    var Notification = this;

    //var message = "Hey boo. Don't forget that your " + soiree.soireeType + " " + Globals.SOIREE_LOWERCASE + " will start in " + mins + " minutes. See you there. xoxo";

    var message = "Your " + soiree.soireeType + " " + Globals.SOIREE_LOWERCASE + " is about to start! Open up " + Globals.SOIREE + " to get started.";

    var newNotification = new Notification({
        bodySuffix : message,
        _user : notificationsUser._id,
        notificationType : Notification.notificationTypes.soireeReminder,
        _id : generateId(notificationsUser, soiree.soireeId, Notification.notificationTypes.soireeStarting),
        title : Globals.SOIREE + " starting"
    });

    newNotification.save(function(err){
        if (err){
            console.log(err);
        }
        else{
            notificationsUser.addNotification(newNotification);
            console.log("Created Notification: " + newNotification.body + " for: " + notificationsUser.firstName);
        }
    });
};


notificationSchema.statics.createCommunityNotification = function(bodySuffix, notificationsUser, causingUser, post, type){
    var Notification = this;

    var firstUser = {user: causingUser.id, firstName: causingUser.firstName, lastName: causingUser.lastName};
    //console.log("firstUser: " + JSON.stringify(firstUser));
    var fullName = causingUser.fullName;

    var newNotification = new Notification({
        bodySuffix : bodySuffix,
        _user : notificationsUser._id,
        postId : post.postId,
        imageUrl : causingUser.profilePictureUrl,
        notificationType : type,
        _id : generateId(notificationsUser, post.postId, type),
        users: [firstUser],
        title : fullName
    });

    newNotification.save();
    notificationsUser.addNotification(newNotification);

    //notificationsUser._notifications.push(newNotification._id);
    //notificationsUser.save();
    //console.log(notificationsUser._notifications);
    console.log("Created Notification: " + newNotification.body + " for: " + notificationsUser.firstName);
    return newNotification;
};

notificationSchema.methods.jsonObject = function(){
    var obj = {
        "read" : this.read,
        "body" : this.body,
        "notificationId" : this.notificationId,
        "notificationType" : this.notificationType,
        "notificationTitle" : this.notificationTitle
    };

    if (this.postId){
        obj.postId = this.postId;
    }
    //if (this.lastUserCommentedName){
    //    obj.lastUserCommentedName = this.lastUserCommentedName;
    //}
    if (this.imageUrl){
        obj.imageUrl = this.imageUrl;
    }

    return obj;
};

notificationSchema.virtual('notificationTitle').get(function () {
    if (this.notificationType === "soireeCancelled"){
        return Globals.SOIREE + " cancelled";
    }
    else return this.lastUserCommentedName;
});

notificationSchema.virtual('lastUserCommentedName').get(function () {
    if (this.users.length > 0){
        var lastUserObj = this.users[this.users.length-1];
        return lastUserObj.firstName + " " + lastUserObj.lastName;
    }
    else return "Notification";
});

notificationSchema.virtual('body').get(function () {
    if (!this.users || this.users.length === 0){
        return this.bodySuffix;
    };

    console.log("this.users:");
    for (var k = 0; k < this.users.length; k++){
        console.log(this.users[k]);
    }

    var numNames = this.users.length;

    if (numNames == 0)
        return this.bodySuffix;

    var firstName = this.users[0].firstName;

    if (numNames === 1){
        return firstName + this.bodySuffix;
    }

    var secondName = this.users[1].firstName;

    if (numNames === 2){
        return firstName + " and " + secondName + this.bodySuffix;
    }

    numNames -= 2;
    var others = (numNames === 1 ? " other" : " others");

    return firstName + ", " + secondName + ", and " + numNames + others + this.bodySuffix;
});

function generateId(user, idSuffix, type){
    var id = user.id + "_" + idSuffix + "_" + type;
    console.log("Notification.generateId(): " + id);
    return id;
}

var deepPopulate = require('mongoose-deep-populate')(mongoose);
var options = {};
notificationSchema.plugin(deepPopulate, options);

module.exports = mongoose.model('Notification', notificationSchema);
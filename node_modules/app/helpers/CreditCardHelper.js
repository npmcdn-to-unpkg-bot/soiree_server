/**
 * Created by shadygabal on 12/13/15.
 */
var stripe = require("stripe")(
    process.env.STRIPE_SECRET_KEY
);
var Globals = require('./Globals.js');

var braintree = require("braintree");

var btEnv = Globals.production ? braintree.Environment.Production : braintree.Environment.Sandbox;
var btMerchantId = Globals.production ? process.env.BRAINTREE_MERCHANT_ID_PRODUCTION : process.env.BRAINTREE_MERCHANT_ID_SANDBOX;
var btPublicKey = Globals.production ? process.env.BRAINTREE_PUBLIC_KEY_PRODUCTION : process.env.BRAINTREE_PUBLIC_KEY_SANDBOX;
var btPrivateKey = Globals.production ? process.env.BRAINTREE_PRIVATE_KEY_PRODUCTION : process.env.BRAINTREE_PRIVATE_KEY_SANDBOX;

var btGateway = braintree.connect({
    environment: btEnv,
    merchantId: btMerchantId,
    publicKey: btPublicKey,
    privateKey: btPrivateKey
});

var paymentGateway = "stripe";

/* Helper */
var ErrorCodes = require('app/helpers/ErrorCodes.js');

var ccHelper = (function() {

    return {
        chargeForSoiree: function (soiree, user, successCallback, errorCallback){
            if (paymentGateway === "stripe"){
                this.chargeForSoireeStripe(soiree, user, successCallback, errorCallback);
            }
            else if(paymentGateway === "braintree"){
                this.chargeForSoireeBraintree(soiree, user, successCallback, errorCallback);
            }
            else return errorCallback("Error: Payment Gateway not specified");

        },
        chargeForSoireeBraintree: function (soiree, user, successCallback, errorCallback) {
            try{
                if (user.testUser && Globals.devOrTest){
                    return successCallback({test : "test"});
                }
                if (!user.chargeable){
                    console.log("attempting to charge user " + user.fullName + " but cannot because user is not chargeable");
                    return errorCallback(ErrorCodes.InvalidInput);
                }
                if (!user.braintreePaymentToken)  {
                    console.log("attempting to charge user " + user.fullName + " but cannot because user is missing braintreePaymentToken");
                    return errorCallback(ErrorCodes.InvalidInput);
                }

                var amount = soiree.initialCharge;

                var description = "Charge for soiree " + soiree.soireeId + " of type " + soiree.soireeType + " on " + soiree.date.toString() + ".";

                btGateway.transaction.sale({
                    amount: amount,
                    paymentMethodToken: user.braintreePaymentToken,
                    customerId : user.braintreeCustomerId,
                    options: {
                        submitForSettlement: true
                    }
                }, function (err, result) {
                    if (err){
                        console.log(err);
                        return errorCallback(ErrorCodes.BraintreeError);
                    }
                    else{
                        console.log("Successfully charged " + user.fullName + " for soiree " + soiree.soireeId);
                        //console.log("%j",result);

                        return successCallback(result);
                    }
                })
            }
            catch(error){
                console.log(error);
                return errorCallback(ErrorCodes.Error);
            }

        },


        generateBrainTreeClientToken : function(successCallback, errorCallback){
            btGateway.clientToken.generate({}, function (err, response) {
                if (err || !response){
                    console.log(err);
                    errorCallback();
                }
                else{
                    successCallback(response.clientToken);
                }
            });
        },

        addBraintreeCard : function(paymentNonce, user, successCallback, errorCallback){
            if (!paymentNonce){
                console.log("addBraintreeCard passed with null nonce");
                return errorCallback(ErrorCodes.MissingData);
            }
            if (!user){
                console.log("addBraintreeCard passed with null user");
                return errorCallback(ErrorCodes.MissingData);
            }
            if (user.braintreeCustomerId){
                this.removeBraintreeCard(user, function(){}, function(){});
            }

            btGateway.customer.create({
                firstName: user.firstName,
                lastName: user.lastName,
                paymentMethodNonce : paymentNonce
            }, function (err, result) {
                if (err || !result.success){
                    console.log(err);
                    errorCallback(ErrorCodes.BraintreeError);
                }
                else{
                    user.braintreePaymentToken = result.customer.paymentMethods[0].token;
                    user.braintreeCustomerId = result.customer.id;
                    user.chargeable = user.braintreePaymentToken ? true : false;

                    if (result.customer.creditCards && result.customer.creditCards.length > 0)
                        user.creditCardLast4Digits = result.customer.creditCards[0].last4;

                    user.save(Globals.saveErrorCallbackWithCallbacks(successCallback, errorCallback));
                }
            });
        },

        removeBraintreeCard : function(user, successCallback, errorCallback){
            if (!user.braintreeCustomerId) {
                return errorCallback(ErrorCodes.InvalidInput);
            }

            btGateway.customer.delete(user.braintreeCustomerId, function (err) {
                if (err) {
                    console.log(err);
                    errorCallback(ErrorCodes.BraintreError);
                }
                else {
                    console.log("deleted braintree customer for " + user.fullName);
                    user.braintreePaymentToken = null;
                    user.braintreeCustomerId = null;
                    user.chargeable = false;

                    user.save(Globals.saveErrorCallbackWithCallbacks(successCallback, errorCallback));
                }
            });

        },



        /* Stripe */

        chargeForSoireeStripe: function (soiree, user, successCallback, errorCallback) {
            if (user.testUser && Globals.devOrTest){
                return successCallback({test : "test"});
            }
            if (!user.chargeable){
                console.log("attempting to charge user " + user.fullName + " but cannot because user is not chargeable");
                return errorCallback(ErrorCodes.InvalidInput);
            }
            if (!user.stripeCustomerId)  {
                console.log("attempting to charge user " + user.fullName + " but cannot because user is missing stripecustomerid");
                return errorCallback(ErrorCodes.InvalidInput);
            }

            var amount = soiree.initialCharge;

            var description = "Charge for soiree " + soiree.soireeId + " of type " + soiree.soireeType + " on " + soiree.date.toString() + ".";

            var chargeOptions = {
                amount: amount,
                currency: "usd",
                description: description
            };

            chargeOptions.customer = user.stripeCustomerId;

            stripe.charges.create(chargeOptions, function(err, charge) {

                console.log(err);
                console.log(charge.status);

                if (err){
                    errorCallback(ErrorCodes.CardDeclined);
                }
                else{
                    successCallback(charge);
                }

            });

        },

        createStripeCustomer: function(stripeToken, user, successCallback, errorCallback){
            if (!stripeToken || !user){
                return errorCallback();
            }

            if (user.stripeCustomerId) return this.addCard(stripeToken, user, successCallback, errorCallback);

            var description = "Soiree customer: " + user.fullName;

            stripe.customers.create({
                description: description,
                source: stripeToken // obtained with Stripe.js
            }, function(err, customer) {

                if (err){
                    return errorCallback(err);
                }
                console.log(JSON.stringify(customer));

                user.stripeCustomerId = customer.id;
                user.creditCardLast4Digits = customer.sources.data[0].last4;
                user.stripeDefaultCardId = customer.default_source;
                user.chargeable = true;

                user.save(function(err2, _user){
                    if (err2){
                        errorCallback(err2);
                    }
                    else{
                        console.log("Saved: " + _user.stripeCustomerId);
                        successCallback(_user);
                    }
                });
            });
        },

        addStripeCard: function(stripeToken, user, successCallback, errorCallback){
            if (!stripeToken || !user){
                return errorCallback();
            }

            if (!user.stripeCustomerId) {
                return this.createStripeCustomer(stripeToken, user, successCallback, errorCallback);
            }

            if (user.stripeDefaultCardId){
                return this.removeCard(user, function(){
                    this.addCard(stripeToken, user, successCallback, errorCallback);
                }, errorCallback);
            }

            stripe.customers.createSource(user.stripeCustomerId, {
                source: stripeToken
            }, function(err, card){
                if (err){
                    errorCallback(err);
                }
                else{
                    user.stripeDefaultCardId = card.id;
                    user.creditCardLast4Digits = card.last4;
                    user.chargeable = true;

                    user.save(function(err2, _user){
                        if (err2){
                            console.log(err2);
                            errorCallback(err2);
                        }
                        else{
                            successCallback(_user);
                        }
                    });
                }
            });




        },

        removeStripeCard : function(user, successCallback, errorCallback){
            if (!user.stripeCustomerId){
                return errorCallback();
            }

            if (user.stripeDefaultCardId){
                stripe.customers.deleteCard(
                    user.stripeCustomerId,
                    user.stripeDefaultCardId,
                    function(err, confirmation) {
                        // asynchronously called
                        if (err){
                            console.log(err);
                            errorCallback();
                        }
                        else{

                            if (confirmation.deleted){
                                user.stripeDefaultCardId = null;
                                user.creditCardLast4Digits = null;
                                user.chargeable = false;

                                user.save(function(err2, _user){
                                    if (err2){
                                        console.log(err2);
                                        errorCallback();
                                    }
                                    else{
                                        successCallback(_user);
                                    }
                                });
                            }
                            else{
                                return errorCallback();
                            }

                        }
                    }
                );
            }
            else return successCallback(user);
        },

        deleteStripeCustomer: function(user, successCallback, errorCallback){
            stripe.customers.del(
                user.stripeCustomerId,
                function(err, confirmation) {
                    // asynchronously called
                    if (err){
                        errorCallback(err);
                    }
                    else{
                        user.stripeCustomerId = null;
                        user.stripeDefaultCardId = null;
                        user.chargeable = false;
                        successCallback(confirmation);
                    }
                }
            );
        }


    }

}());

module.exports = ccHelper;
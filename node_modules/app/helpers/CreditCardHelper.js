/**
 * Created by shadygabal on 12/13/15.
 */
//var express = require('express');
//var router = express.Router();
//
//var dbFolderLocation = "../../db/";
//var helpersFolderLocation = "../../helpers/";
//
//var mongoose = require('app/db/mongoose_connect.js');
//var Soiree = require('app/db/Soiree.js');
//var Business = require('app/db/Business.js');
//var User = require('app/db/User.js');
//
//var DateHelper = require('app/helpers/DateHelper.js');
//var SoireeHelper = require('app/helpers/SoireeHelper.js');

var stripe = require("stripe")(
    process.env.STRIPE_SECRET_KEY
);
var braintree = require("braintree");
var btGateway = braintree.connect({
    environment: braintree.Environment.Sandbox,
    merchantId: process.env.BRAINTREE_MERCHANT_ID,
    publicKey: process.env.BRAINTREE_PUBLIC_KEY,
    privateKey: process.env.BRAINTREE_PRIVATE_KEY
});

/* Helper */
var Globals = require('./Globals.js');

var ccHelper = (function() {

    return {
        chargeForSoiree: function (soiree, user, successCallback, errorCallback) {
            if (user.testUser && Globals.development){
                return successCallback({test : "test"});
            }
            if (!user.chargeable){
                console.log("attempting to charge user " + user.fullName + " but cannot because user is not chargeable");
                return errrorCallback();
            }
            if (!user.stripeCustomerId)  {
                console.log("attempting to charge user " + user.fullName + " but cannot because user is missing stripecustomerid");
                return errorCallback();
            }

            var amount = soiree.initialCharge;

            var description = "Charge for soiree " + soiree.soireeId + " of type " + soiree.soireeType + " on " + soiree.date.toString() + ".";

            var chargeOptions = {
                amount: amount,
                currency: "usd",
                description: description
            };

            chargeOptions.customer = user.stripeCustomerId;

            stripe.charges.create(chargeOptions, function(err, charge) {

                console.log(err);
                console.log(charge.status);

                if (err){
                    errorCallback(err);
                }
                else{
                    successCallback(charge);
                }

                    //if (!user.stripeCustomerId && charge.customer) {
                    //    user.stripeCustomerId = charge.customer;
                    //
                    //    user.save(function (err) {
                    //        if (err) {
                    //            errorCallback(err);
                    //        }
                    //        else {
                    //            successCallback(charge);
                    //        }
                    //    });
                    //}
                    //else

                    //console.log(charge);
                //console.log(charge.customer);

                // asynchronously called
                //if (err && err.type === 'StripeCardError') {
                //    // The card has been declined
                //}

            });

        },

        createStripeCustomer: function(stripeToken, user, successCallback, errorCallback){
            if (!stripeToken || !user){
                return errorCallback();
            }

            if (user.stripeCustomerId) return this.addCard(stripeToken, user, successCallback, errorCallback);

            var description = "Soiree customer: " + user.fullName;

            stripe.customers.create({
                description: description,
                source: stripeToken // obtained with Stripe.js
            }, function(err, customer) {

                if (err){
                    return errorCallback(err);
                }
                console.log(JSON.stringify(customer));

                user.stripeCustomerId = customer.id;
                user.creditCardLast4Digits = customer.sources.data[0].last4;
                user.stripeDefaultCardId = customer.default_source;
                user.chargeable = true;

                user.save(function(err2, _user){
                    if (err2){
                        errorCallback(err2);
                    }
                    else{
                        console.log("Saved: " + _user.stripeCustomerId);
                        successCallback(_user);
                    }
                });
            });
        },

        addStripeCard: function(stripeToken, user, successCallback, errorCallback){
            if (!stripeToken || !user){
                return errorCallback();
            }

            if (!user.stripeCustomerId) {
                return this.createStripeCustomer(stripeToken, user, successCallback, errorCallback);
            }

            if (user.stripeDefaultCardId){
                return this.removeCard(user, function(){
                    this.addCard(stripeToken, user, successCallback, errorCallback);
                }, errorCallback);
            }

            stripe.customers.createSource(user.stripeCustomerId, {
                source: stripeToken
            }, function(err, card){
                if (err){
                    errorCallback(err);
                }
                else{
                    user.stripeDefaultCardId = card.id;
                    user.creditCardLast4Digits = card.last4;
                    user.chargeable = true;

                    user.save(function(err2, _user){
                       if (err2){
                           console.log(err2);
                           errorCallback(err2);
                       }
                        else{
                           successCallback(_user);
                       }
                    });
                }
            });




        },

        removeStripeCard : function(user, successCallback, errorCallback){
            if (!user.stripeCustomerId){
                return errorCallback();
            }

          if (user.stripeDefaultCardId){
              stripe.customers.deleteCard(
                  user.stripeCustomerId,
                  user.stripeDefaultCardId,
                  function(err, confirmation) {
                      // asynchronously called
                      if (err){
                          console.log(err);
                          errorCallback();
                      }
                      else{

                          if (confirmation.deleted){
                              user.stripeDefaultCardId = null;
                              user.creditCardLast4Digits = null;
                              user.chargeable = false;

                              user.save(function(err2, _user){
                                 if (err2){
                                     console.log(err2);
                                     errorCallback();
                                 }
                                  else{
                                     successCallback(_user);
                                 }
                              });
                          }
                          else{
                              return errorCallback();
                          }

                      }
                  }
              );
          }
            else return successCallback(user);
        },

        deleteStripeCustomer: function(user, successCallback, errorCallback){
            stripe.customers.del(
                user.stripeCustomerId,
                function(err, confirmation) {
                    // asynchronously called
                    if (err){
                        errorCallback(err);
                    }
                    else{
                        user.stripeCustomerId = null;
                        user.stripeDefaultCardId = null;
                        user.chargeable = false;
                        successCallback(confirmation);
                    }
                }
            );
        },

        addBraintreeCard : function(paymentNonce, user, successCallback, errorCallback){

        },

        generateBrainTreeClientToken : function(successCallback, errorCallback){
            btGateway.clientToken.generate({}, function (err, response) {
                if (err || !response){
                    console.log(err);
                    errorCallback();
                }
                else{
                    successCallback(response.clientToken);
                }
            });
        }

    }

}());

module.exports = ccHelper;
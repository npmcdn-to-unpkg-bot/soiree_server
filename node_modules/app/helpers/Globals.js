var request = require('request');

var isHeroku = (process.env.DYNO) ? true : false;

if (!isHeroku){
    //local .env
    require('dotenv').config({silent: true});
}
var env = require('get-env')({
    development : ['dev', 'development'],
    production : ['prod', 'production'],
    test : ['test']
});

var Globals = {
    io : {},
    socketsInRoom : function(roomId) {
        var arr = [], room = this.io.sockets.adapter.rooms[roomId];
        if (room) {
            for (var id in room) {
                arr.push(io.sockets.adapter.nsp.connected[id]);
            }
        }
        return arr;
    },
    env : env,
    development: env === 'development',
    production : env === 'production',
    test : env === 'test',
    devOrTest : (env === 'development' || env === 'test'),
    heroku : (isHeroku) ? true : false,
    SALT_LENGTH : 10,
    ACCESS_TOKEN_LENGTH : 64,
    SOIREE : "Soirée",
    SOIREE_LOWERCASE : "soirée",
    RETRIES_ON_DUPLICATE_CONFIRMATION_CODE: 5,
    RETRIES_ON_DUPLICATE_ID : 10,
    genders : ["male", "female"],
    businessTypes : ["bar", "restaurant", "comedy_club"],
    /* Soirees */
    soireeTypes : ["dinner", "drinks", "soiree_date", "test", "movie"],
    initialChargePerSoireeType : {"dinner" : 99, "drinks" : 99, "soiree_date" : 99, "test" : 99, "movie" : 99},
    availableTimesPerSoireeType : {
        "dinner" : ["6:00 PM", "6:30 PM", "7:00 PM", "7:30 PM"],
        "drinks" : ["9:00 PM", "9:30 PM", "10:00 PM", "10:30 PM", "11:59 PM", "3:00 AM", "5:00 AM"],
        "soiree_date" : ["7:00 PM", "8:00 PM", "9:00 PM", "1:00 AM", "5:00 AM"],
        "test" : ["1:00 PM", "2:00 PM", "11:00 PM", "12:00 AM", "1:00 AM", "2:00 AM", "3:00 AM", "4:00 AM", "5:00 AM", "6:00 AM", "7:00 AM"],
        "movie" : ["6:30 PM", "7:00 PM", "7:30 PM", "8:00 PM", "11:59 PM"]
    },
    numUsersMaxPerSoireeType : {"dinner" : 10, "drinks" : 20, "soiree_date" : 40, "test" : 3, "movie" : 6},
    numUsersMinPerSoireeType : {"dinner" : 5, "drinks" : 8, "soiree_date" : 15, "test" : 2, "movie" : 3},
    scheduledSoireeAvailableTimes : [
        "11:00 AM","11:30 AM","12:00 PM","12:30 PM","1:00 PM",
        "1:30 PM","2:00 PM","2:30 PM","3:00 PM","3:30 PM",
        "4:00 PM","4:30 PM", "5:00 PM", "5:30 PM", "6:00 PM",
        "6:30 PM", "7:00 PM", "7:30 PM", "8:00 PM","8:30 PM",
        "9:00 PM","9:30 PM","10:00 PM","10:30 PM","11:00 PM"
    ],
    soireesCancelling : {},
    minMaleToFemaleRatios : {//max num of one gender per another. if no ratio desired leave out
        "dinner": "4/2",
        "drinks": "4/2",
        "soiree_date": "1/1"
    },
    soireeCategoriesPerSoireeType: {
        "drinks" : "Social Soirées",
        "dinner" : "Social Soirées",
        "movie" : "Movie Soirées",
        "soiree_date" : "Soirées for Singles"
    },
    numSoireesHostedPerBusiness : {},
    soireeScorePostUpvoteIncrement : 3,
    soireeScoreCommentUpvoteIncrement : 3,
    soireeScoreSoireeIncrement : 50,
    feedbackTypes : {
      "SOIREE" : "soiree",
        "TIP" : "tip",
        "PROBLEM" : "problem"
    },
    /* Functions */
    saveErrorCallback : function(err){
        if (err){
            console.log(err);
        }
    },
    fetchErrorCallback : function(res){
        return function(err){
            var ResHelper = require('app/helpers/ResHelper.js');
            ResHelper.sendError(res, error);
        };
    },
    saveErrorCallbackWithCallbacks : function(successCallback, errorCallback, successCallbackParam){
        return function(err, _doc){
            if (err){
                console.log(err);
                errorCallback(ErrorCodes.MongoError);
            }
            else{
                successCallback(_doc);
            }
        };
    },
    requestWebpage : function(url, successCallback, errorCallback){

        var timeoutInMilliseconds = 10*1000;
        var opts = {
            url: url,
            timeout: timeoutInMilliseconds
        }

        request(opts, function (err, response, body) {
            if (err) {
                console.log("Error requesting " + url + ": " + err);
                if (errorCallback){
                    errorCallback();
                }
            }
            else{
                var statusCode = response.statusCode
                if (err){
                    console.log(err);
                    errorCallback();
                }
                else successCallback(body);

            }
        });
    },
    loopThroughObject : function(obj, forLoop){
        if (typeof obj === 'object'){
            for (var key in obj) {
                if (!obj.hasOwnProperty(key)) {
                    continue;
                }

                forLoop(key);
            }
        }
    }


};


module.exports = Globals;
/**
 * Created by shadygabal on 1/7/16.
 */

var arrHelper = (function() {
    return {
        move : function(arr, fromIndex, toIndex) {
            if (toIndex < 0 || fromIndex < 0 || !arr || fromIndex == toIndex)
             return;

            var element = arr[fromIndex];
            arr.splice(fromIndex, 1);
            arr.splice(toIndex, 0, element);
        },
        pushOnlyOnce : function(arr, obj, cb){
            var index = arr.indexOf(obj);
            if (index === -1){
                arr.push(obj);
                if (cb) cb(true);
            }
            else if (cb) cb(false);
        },
        removeObject : function(arr, obj, cb){
            if (!arr || !obj){
                console.log("ArrayHelper removeObject() passed empty arr or obj");
                if (cb) cb(false);
                return;
            }

            var index = arr.indexOf(obj);
            if (index != -1){
                arr.splice(index, 1);
                if (cb) cb(true);
            }
            else{
                console.log("ArrayHelper removeObject() cannot remove object because it is not in array");
                if (cb) cb(false);

            }
        },
        pushOnlyOncePopulated : function(doc, field, obj, cb){
            //console.log("doc[field] " + JSON.stringify(doc[field]) + " for field : " + field);
            try {
                var arr = doc[field];
                var index = this.indexOfPopulated(arr, obj);
                if (index === -1){
                    arr.push(obj);
                }

                //if (doc.populated(field)) {
                //    this.pushOnlyOnce(doc[field], obj, cb);
                //}
                //else {
                //    if (!obj._id){
                //        this.pushOnlyOnce(doc[field], obj, cb);
                //    }
                //    else this.pushOnlyOnce(doc[field], obj._id, cb);
                //}
            }
            catch(err){
                console.log("Error in pushOnlyOncePopulated: " + err);
                return;
            }
        },
        removeObjectPopulated : function(doc, field, obj, cb){
            try{
                var arr = doc[field];
                var index = this.indexOfPopulated(arr, obj);
                if (index !== -1){
                    arr.splice(index, 1);
                }
                //
                //if (doc.populated(field)){
                //    this.removeObject(doc[field], obj, cb);
                //}
                //else{
                //    if (!obj._id){
                //        this.removeObject(doc[field], obj, cb);
                //    }
                //    this.removeObject(doc[field], obj._id, cb);
                //}
            }
            catch(err){
                console.log("Error in removeObjectPopulated: " + err);
                return;
            }

        },
        indexOfPopulated : function(arr, obj){
            if (!arr || !obj || arr.length === 0) return -1;

            var objIsId = obj._id ? false : true;
            var arrIsPopulated = arr[0]._id ? true : false;

            for (var i = 0; i < arr.length; i++){
                if (objIsId){//obj is an ObjectId
                    if (arrIsPopulated){//obj is ObjectId, arr is populated
                        if (obj.equals(arr[i]._id)){
                            return i;
                        }
                    }
                    else{//both are ObjectIds
                        if (obj.equals(arr[i])){
                            return i;
                        }
                    }
                }
                else{//obj is populated
                    if (arrIsPopulated){//both are populated
                        if (obj._id.equals(arr[i]._id)){
                            return i;
                        }
                    }
                    else{//obj is populated, arr is ObjectId
                        if (obj._id.equals(arr[i])){
                            return i;
                        }
                    }

                }
            }
            return -1;
        }

    }

    }());

module.exports = arrHelper;





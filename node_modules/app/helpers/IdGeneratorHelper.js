/**
 * Created by shadygabal on 1/15/16.
 */
var idHelper = (function() {

    var mongoose = require('app/db/mongoose_connect.js');
    var _ = require('underscore');

    return {
        generateId : function(len, options){
            options = options ? options : {};
            options = _.defaults(options, {
                addLowercase : false,
                onlyLowercase : false
            });

            var lettersStr = "abcdefghjklmnpqrstuvwxyz";
            var letters = [];
            if (!options.onlyLowercase) {
                letters = letters.concat(lettersStr.toUpperCase().split("")); //No o,i
            }
            if (options.addLowercase || options.onlyLowercase){
                letters = letters.concat(lettersStr.toLowerCase().split(""));
            }
            var numbers = "123456789".split("");//no 0
            var both = letters.concat(numbers);

            var code = "";
            for (var i = 1; i < len+1; i++){//not i=0 because of i%3 call
                var arr;
                if (i % 3 != 0){
                    arr = both;
                }
                else{
                    arr = numbers;
                }
                var randIndex = parseInt(Math.random() * arr.length);
                code += arr[randIndex];
            }
            //console.log("generated code: " + code);
            return code;
         },
        generateUniqueId: function(modelName, field, doc, next, options){
            options = options ? options : {};
            var len = options.length ? options.length : 10;

            var id = this.generateId(len, options);
            var model = mongoose.model(modelName);

            var retries = 0;

            var check = function() {
                //console.log("tried id " + id);
                model.findOne({field : id}, function (err, business) {
                    if (err || business) {
                        console.log('failed with err : ' + err);
                        if (retries < Globals.RETRIES_ON_DUPLICATE_ID) {
                            id = this.generateId(len, options);
                            retries++;
                            check();
                        }
                        else{
                            next(new Error("Unable to generate unique " + field));
                            //errorCallback();
                        }
                    }
                    else{
                        //console.log("succeeded : " + id);
                        doc[field] = id;
                        next();
                        //successCallback(id);
                    }
                });
            };

            check();
        }

}

}());

module.exports = idHelper;

